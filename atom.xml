<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wu Blog</title>
  
  <subtitle>Blogging about life and tech.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk208.github.io/"/>
  <updated>2019-04-19T00:38:23.777Z</updated>
  <id>https://tk208.github.io/</id>
  
  <author>
    <name>Humos Wu.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>art-template模板引擎介绍</title>
    <link href="https://tk208.github.io/art-template%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/"/>
    <id>https://tk208.github.io/art-template模板引擎介绍/</id>
    <published>2019-04-19T00:38:23.000Z</published>
    <updated>2019-04-19T00:38:23.777Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux环境下搭建Vue开发教程</title>
    <link href="https://tk208.github.io/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAVue%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    <id>https://tk208.github.io/Linux环境下搭建Vue开发教程/</id>
    <published>2019-04-02T10:45:30.000Z</published>
    <updated>2019-04-02T13:27:46.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文作者是：<a href="https://blog.csdn.net/FormulaRoom" target="_blank" rel="noopener">FormulaRoom</a>，发布于 <a href="https://blog.csdn.net/formularoom/article/details/73920741" target="_blank" rel="noopener">CSDN</a>。</p><hr><p>本文介绍在Linux环境下从零开始搭建Vue开发环境的整个过程。</p><blockquote><p>注：使用的linux的系统版本为ubuntu 系的 —— <a href="https://www.linuxmint.com/download_all.php" target="_blank" rel="noopener">Linux Mint</a>，这是国外使用最多的桌面发行版之一，同时各项操作也比较人性化，建议优先考虑。 （比如 nativescript 默认只提供了 deb 包的支持。）</p></blockquote><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ul><li>从 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs官网</a> 下载安装包</li></ul><p><img src="https://image.tracup.com/676884b065b51b46b5ada58abdf8494c" alt="20170629172325106.png"></p><ul><li>解压到相应的文件夹</li></ul><blockquote><p>解压tar.xz文件：先 xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar 然后，再用 tar xvf xxx.tar来解包。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v10.15.3-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">tar xvf node-v10.15.3-linux-x64.tar</span><br></pre></td></tr></table></figure><p>在文件夹会出现相应目录：</p><p><img src="https://image.tracup.com/67642b20e5c6776ac43aaeaa1246d27d" alt="1.png"></p><ul><li>建立软链接</li></ul><blockquote><p>/你的文件目录/node-v10.15.3-linux-x64/</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /tmp/mozilla_tk2080/node-v10.15.3-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line"></span><br><span class="line">sudo ln -s /tmp/mozilla_tk2080/node-v10.15.3-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><ul><li>验证 </li></ul><p>使用 <code>node -v</code> 和 <code>npm -v</code> 来验证是否安装成功，若安装成功则会看到相应的版本信息。</p><p><img src="https://image.tracup.com/7d62fe4105121c32380130c958319b43" alt="2.png"></p><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><p>安装cnpm是因为使用npm install安装包时速度很慢，所以建议安装cnpm后使用cnpm install来安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完成后同样要建软链接，否则在使用cnpm时会报 <code>No command &#39;cnpm&#39; found</code> 的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /tmp/mozilla_tk2080/node-v10.15.3-linux-x64/bin/cnpm /usr/local/bin/cnpm</span><br></pre></td></tr></table></figure><p>安装完成后可以使用 <code>cnpm -v</code> 来进行验证。</p><h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure><p>安装完成后同样要建立软链接，否则会报 <code>No command &#39;vue&#39; found</code> 的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /tmp/mozilla_tk2080/node-v10.15.3-linux-x64/bin/vue /usr/local/bin/vue</span><br></pre></td></tr></table></figure><blockquote><p>如果不想每次全局安装后都去建立软链接，可以在安装完npm或cnpm后，使用以下命令将安装路径指向/usr/local，这样之后使用npm或cnpm安装包之后就可以直接使用命令。 </p><p><code>npm config set prefix /usr/local</code></p><p><code>cnpm config set prefix /usr/local</code></p><p>设置完之后可以使用下列命令进行查看。 </p><p><code>npm root -g</code></p><p><code>cnpm root -g</code> </p></blockquote><h2 id="使用vue-cli创建项目"><a href="#使用vue-cli创建项目" class="headerlink" title="使用vue-cli创建项目"></a>使用vue-cli创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack firstproject</span><br></pre></td></tr></table></figure><p>下载完成后执行下列命令可运行项目查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> firstproject</span><br><span class="line"></span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><p><img src="https://image.tracup.com/8be3357ddc7120ae5a502713cca1aba3" alt="3.png"></p><p>到此为止，Linux环境下的Vue开发环境就搭建完成了。</p>]]></content>
    
    <summary type="html">
    
      如何在Linux环境中搭建Vue开发平台。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
      <category term="Linux" scheme="https://tk208.github.io/categories/Tech/Linux/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://tk208.github.io/tags/Linux/"/>
    
      <category term="Vue" scheme="https://tk208.github.io/tags/Vue/"/>
    
      <category term="环境搭建" scheme="https://tk208.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>30分钟理解GraphQL</title>
    <link href="https://tk208.github.io/30%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3-GraphQL/"/>
    <id>https://tk208.github.io/30分钟理解-GraphQL/</id>
    <published>2019-03-30T13:18:14.000Z</published>
    <updated>2019-03-31T05:40:59.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文作者是：<a href="https://segmentfault.com/a/1190000013961872" target="_blank" rel="noopener">littleLyon</a>，发布于 <a href="https://segmentfault.com/blog/littlelyon" target="_blank" rel="noopener">狮乐园</a>。</p><hr><p>在上一篇文章 <code>RPC vs REST vs GraphQL</code> 中，对于这三者的优缺点进行了比较宏观的对比，而且我们也会发现，一般比较简单的项目其实并不需要 <code>GraphQL</code> ，但是我们仍然需要对新的技术有一定的了解和掌握，在新技术普及时才不会措手不及。</p><p>这篇文章主要介绍一些我接触 <code>GraphQL</code> 的这段时间，觉得需要了解的比较核心的概念，比较适合一下人群：</p><ul><li>听说过 <code>GraphQL</code> 的读者，想深入了解一下</li></ul><ul><li>想系统地学习 <code>GraphQL</code> 的读者</li></ul><ul><li>正在调研 <code>GraphQL</code> 技术的读者</li></ul><p>这些概念并不局限于服务端或者是客户端，如果你熟悉这些概念，在接触任意使用 <code>GraphQL</code> 作为技术背景的库或者框架时，都可以通过文档很快的上手。</p><p>如果你已经 <code>GraphQL</code> 应用于了实际项目中，那么这篇文章可能不适合你，因为其中并没有包含一些实践中的总结和经验，关于实践的东西我会在之后再单另写一篇文章总结。</p><h2 id="什么是GraphQL"><a href="#什么是GraphQL" class="headerlink" title="什么是GraphQL"></a>什么是GraphQL</h2><p>介绍 <code>GraphQL</code> 是什么的文章网上一搜一大把，篇幅有长有短，但是从最核心上讲，它是一种查询语言，再进一步说，是一种 <code>API</code> 查询语言。</p><p>这里可能有的人就会说，什么？<code>API</code> 还能查？<code>API</code> 不是用来调用的吗？是的，这正是 <code>GraphQL</code> 的强大之处，引用官方文档的一句话：</p><blockquote><p>ask exactly what you want.</p></blockquote><p>我们在使用 <code>REST</code> 接口时，接口返回的数据格式、数据类型都是后端预先定义好的，如果返回的数据格式并不是调用者所期望的，作为前端的我们可以通过以下两种方式来解决问题：</p><ul><li>和后端沟通，改接口（更改数据源）</li></ul><ul><li>自己做一些适配工作（处理数据源）</li></ul><p>一般如果是个人项目，改后端接口这种事情可以随意搞，但是如果是公司项目，改后端接口往往是一件比较敏感的事情，尤其是对于三端（web、andriod、ios）公用同一套后端接口的情况。大部分情况下，均是按第二种方式来解决问题的。</p><p>因此如果接口的返回值，可以通过某种手段，从静态变为动态，即调用者来声明接口返回什么数据，很大程度上可以进一步解耦前后端的关联。</p><p>在 <code>GraphQL</code> 中，我们通过预先定义一张 <code>Schema</code> 和声明一些 <code>Type</code> 来达到上面提及的效果，我们需要知道：</p><ul><li>对于数据模型的抽象是通过 <code>Type</code> 来描述的</li></ul><ul><li>对于接口获取数据的逻辑是通过 <code>Schema</code> 来描述的</li></ul><ul><li>这么说可能比较抽象，我们一个一个来说明。</li></ul><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>对于数据模型的抽象是通过 <code>Type</code> 来描述的，每一个 <code>Type</code> 有若干 <code>Field</code> 组成，每个 <code>Field</code> 又分别指向某个 <code>Type</code> 。</p><p><code>GraphQL</code> 的 <code>Type</code> 简单可以分为两种，一种叫做 <code>Scalar Type(标量类型)</code> ，另一种叫做 <code>Object Type(对象类型)</code> 。</p><h3 id="Scalar-Type"><a href="#Scalar-Type" class="headerlink" title="Scalar Type"></a>Scalar Type</h3><p><code>GraphQL</code> 中的内建的标量包含，<code>String</code>、<code>Int</code>、<code>Float</code>、<code>Boolean</code>、<code>Enum</code>，对于熟悉编程语言的人来说，这些都应该很好理解。</p><p>值得注意的是，<code>GraphQL</code> 中可以通过 <code>Scalar</code> 声明一个新的标量，比如：</p><ul><li><code>prisma</code>（一个使用GraphQL来抽象数据库操作的库）中，还有 <code>DateTime</code> 和 <code>ID</code> 这两个标量分别代表日期格式和主键</li></ul><ul><li>在使用GraphQL实现文件上传接口时，需要声明一个Upload标量来代表要上传的文件</li></ul><p>总之，我们只需要记住，标量是 <code>GraphQL</code> 类型系统中最小的颗粒，关于它在 <code>GraphQL</code> 解析查询结果时，我们还会再提及它。</p><h3 id="Object-Type"><a href="#Object-Type" class="headerlink" title="Object Type"></a>Object Type</h3><p>仅有标量是不够的抽象一些复杂的数据模型的，这时候我们需要使用对象类型，举个例子(先忽略语法，仅从字面上看)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Article &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  text: String</span><br><span class="line">  isPublished: Boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，就声明了一个 <code>Article</code> 类型，它有3个Field，分别是 <code>ID</code> 类型的id，<code>String</code> 类型的text和 <code>Boolean</code> 类型的isPublished。</p><p>对于对象类型的Field的声明，我们一般使用标量，但是我们也可以使用另外一个对象类型，比如如果我们再声明一个新的 <code>User</code> 类型，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type User &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们就可以稍微的更改一下关于 <code>Article</code> 类型的声明代码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Article &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  text: String</span><br><span class="line">  isPublished: Boolean</span><br><span class="line">  author: User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article</code> 新增的 <code>author</code> 的Field是 <code>User</code> 类型, 代表这篇文章的作者。</p><p>总之，我们通过对象模型来构建 <code>GraphQL</code> 中关于一个数据模型的形状，同时还可以声明各个模型之间的内在关联（一对多、一对一或多对多）。</p><h3 id="Type-Modifier"><a href="#Type-Modifier" class="headerlink" title="Type Modifier"></a>Type Modifier</h3><p>关于类型，还有一个较重要的概念，即类型修饰符，当前的类型修饰符有两种，分别是 <code>List</code> 和 <code>Required</code> ，它们的语法分别为 <code>[Type]</code> 和 <code>Type!</code> , 同时这两者可以互相组合，比如 <code>[Type]!</code> 或者 <code>[Type!]</code> 或者 <code>[Type!]!</code> (请仔细看这里 <code>!</code> 的位置)，它们的含义分别为：</p><ul><li>列表本身为必填项，但其内部元素可以为空</li></ul><ul><li>列表本身可以为空，但是其内部元素为必填</li></ul><ul><li>列表本身和内部元素均为必填</li></ul><p>我们进一步来更改上面的例子，假如我们又声明了一个新的 <code>Comment</code> 类型，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Comment &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  desc: String,</span><br><span class="line">  author: User!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现这里的ID有一个!，它代表这个Field是必填的，再来更新 <code>Article</code> 对象，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Article &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  text: String</span><br><span class="line">  isPublished: Boolean</span><br><span class="line">  author: User!</span><br><span class="line">  comments: [Comment!]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里的作出的更改如下：</p><ul><li>id字段改为必填</li></ul><ul><li>author字段改为必填</li></ul><ul><li>新增了comments字段，它的类型是一个元素为Comment类型的List类型</li></ul><p>最终的 <code>Article</code> 类型，就是 <code>GraphQL</code> 中关于文章这个数据模型，一个比较简单的类型声明。</p><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>现在我们开始介绍 <code>Schema</code>，我们之前简单描述了它的作用，即它是用来描述对于接口获取数据逻辑的，但这样描述仍然是有些抽象的，我们其实不妨把它当做 <code>REST</code> 架构中每个独立资源的 <code>uri</code> 来理解它，只不过在GraphQL中，我们用Query来描述资源的获取方式。因此，我们可以将 <code>Schema</code> 理解为多个Query组成的一张表。</p><p>这里又涉及一个新的概念 <code>Query</code> ，GraphQL中使用 <code>Query</code> 来抽象数据的查询逻辑，当前标准下，有三种查询类型，分别是 <strong>query（查询）</strong>、<strong>mutation（更改）</strong> 和 <strong>subscription（订阅）</strong>。</p><p>Note: </p><p>为了方便区分，<code>Query</code> 特指 <code>GraphQL</code> 中的查询（包含三种类型），<code>query</code> 指 <code>GraphQL</code> 中的查询类型（仅指查询类型）</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>上面所提及的3中基本查询类型是作为 <code>Root Query（根查询）</code> 存在的，对于传统的CRUD项目，我们只需要前两种类型就足够了，第三种是针对当前日趋流行的 <code>real-time</code> 应用提出的。</p><p>我们按照字面意思来理解它们就好，如下：</p><ul><li>query（查询）：当获取数据时，应当选取Query类型</li></ul><ul><li>mutation（更改）：当尝试修改数据时，应当使用mutation类型</li></ul><ul><li>subscription（订阅）：当希望数据更改时，可以进行消息推送，使用subscription类型</li></ul><p>仍然以一个例子来说明。</p><p>首先，我们分别以 <code>REST</code> 和 <code>GraphQL</code> 的角度，以 <code>Article</code> 为数据模型，编写一系列CRUD的接口，如下：</p><h3 id="Rest-接口"><a href="#Rest-接口" class="headerlink" title="Rest 接口"></a>Rest 接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /api/v1/articles/</span><br><span class="line">GET /api/v1/article/:id/</span><br><span class="line">POST /api/v1/article/</span><br><span class="line">DELETE /api/v1/article/:id/</span><br><span class="line">PATCH /api/v1/article/:id/</span><br></pre></td></tr></table></figure><h3 id="GraphQL-Query"><a href="#GraphQL-Query" class="headerlink" title="GraphQL Query"></a>GraphQL Query</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  articles(): [Article!]!</span><br><span class="line">  article(id: Int): Article!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation &#123;</span><br><span class="line">  createArticle(): Article!</span><br><span class="line">  updateArticle(id: Int): Article!</span><br><span class="line">  deleteArticle(id: Int): Article!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比我们较熟悉的 <code>REST</code> 的接口我们可以发现，<code>GraphQL</code> 中是按根查询的类型来划分 <code>Query</code> 职能的，同时还会明确的声明每个 <code>Query</code> 所返回的数据类型，这里的关于类型的语法和上一章节中是一样的。需要注意的是，我们所声明的任何 <code>Query</code> 都必须是 <code>Root Query</code> 的子集，这和 <code>GraphQL</code> 内部的运行机制有关。</p><p>例子中我们仅仅声明了 <code>Query</code> 类型和 <code>Mutation</code> 类型，如果我们的应用中对于评论列表有 <code>real-time</code> 的需求的话，在 <code>REST</code> 中，我们可能会直接通过长连接或者通过提供一些带验证的获取长连接url的接口，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /api/v1/messages/</span><br></pre></td></tr></table></figure><p>之后长连接会将新的数据推送给我们，在 <code>GraphQL</code> 中，我们则会以更加声明式的方式进行声明，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subscription &#123;</span><br><span class="line">  updatedArticle() &#123;</span><br><span class="line">    mutation</span><br><span class="line">    node &#123;</span><br><span class="line">        comments: [Comment!]!</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不必纠结于这里的语法，因为这篇文章的目的不是让你在30分钟内学会GraphQL的语法，而是理解的它的一些核心概念，比如这里，我们就声明了一个订阅Query，这个Query会在有新的Article被创建或者更新时，推送新的数据对象。当然，在实际运行中，其内部实现仍然是建立于长连接之上的，但是我们能够以更加声明式的方式来进行声明它。</p><h3 id="Resolver"><a href="#Resolver" class="headerlink" title="Resolver"></a>Resolver</h3><p>如果我们仅仅在 <code>Schema</code> 中声明了若干 <code>Query</code>，那么我们只进行了一半的工作，因为我们并没有提供相关 <code>Query</code> 所返回数据的逻辑。为了能够使 <code>GraphQL</code> 正常工作，我们还需要再了解一个核心概念，<code>Resolver（解析函数）</code>。</p><p>GraphQL中，我们会有这样一个约定，Query和与之对应的Resolver是同名的，这样在GraphQL才能把它们对应起来，举个例子，比如关于 <code>articles(): [Article!]!</code> 这个Query, 它的Resolver的名字必然叫做 <code>articles</code> 。</p><p>在介绍 <code>Resolver</code> 之前，是时候从整体上了解下GraphQL的内部工作机制了，假设现在我们要对使用我们已经声明的 <code>articles</code> 的Query，我们可能会写以下查询语句（同样暂时忽略语法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Query &#123;</span><br><span class="line">  articles &#123;</span><br><span class="line">       id</span><br><span class="line">       author &#123;</span><br><span class="line">           name</span><br><span class="line">       &#125;</span><br><span class="line">       comments &#123;</span><br><span class="line">      id</span><br><span class="line">      desc</span><br><span class="line">      author</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GraphQL在解析这段查询语句时会按如下步骤（简略版）：</p><ul><li>首先进行第一层解析，当前 <code>Query</code> 的 <code>Root Query</code> 类型是 <code>query</code>，同时需要它的名字是 <code>articles</code></li></ul><ul><li>之后会尝试使用 <code>articles</code> 的 <code>Resolver</code> 获取解析数据，第一层解析完毕</li></ul><ul><li><p>之后对第一层解析的返回值，进行第二层解析，当前 <code>articles</code> 还包含三个子 <code>Query</code> ，分别是 <code>id</code> 、<code>author</code> 和 <code>comments</code></p></li><li><p>id在Author类型中为标量类型，解析结束</p></li></ul><ul><li>author在Author类型中为对象类型User，尝试使用User的Resolver获取数据，当前field解析完毕</li></ul><ul><li>之后对第二层解析的返回值，进行第三层解析，当前author还包含一个Query, name，由于它是标量类型，解析结束</li></ul><ul><li>comments同上…</li></ul><p>我们可以发现，GraphQL大体的解析流程就是遇到一个Query之后，尝试使用它的Resolver取值，之后再对返回值进行解析，这个过程是递归的，直到所解析Field的类型是 <code>Scalar Type（标量类型）</code> 为止。解析的整个过程我们可以把它想象成一个很长的 <code>Resolver Chain（解析链）</code>。</p><p>这里对于GraphQL的解析过程只是很简单的概括，其内部运行机制远比这个复杂，当然这些对于使用者是黑盒的，我们只需要大概了解它的过程即可。</p><p>Resolver本身的声明在各个语言中是不一样的，因为它代表数据获取的具体逻辑。它的函数签名(以js为例子)如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(parent, args, ctx, info) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的参数的意义如下：</p><ul><li>parent: 当前上一个Resolver的返回值</li></ul><ul><li>args: 传入某个Query中的函数（比如上面例子中article(id: Int)中的id）</li></ul><ul><li>ctx: 在Resolver解析链中不断传递的中间变量（类似中间件架构中的context）</li></ul><ul><li>info: 当前Query的AST对象</li></ul><p>值得注意的是，Resolver内部实现对于GraphQL完全是黑盒状态。这意味着Resolver如何返回数据、返回什么样的数据、从哪返回数据，完全取决于Resolver本身，基于这一点，在实际中，很多人往往把GraphQL作为一个中间层来使用，数据的获取通过Resolver来封装，内部数据获取的实现可能基于RPC、REST、WS、SQL等多种不同的方式。同时，基于这一点，当你在对一些未使用GraphQL的系统进行迁移时（比如REST），可以很好的进行增量式迁移。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大概就这么多，首先感谢你耐心的读到这里，虽然题目是30分钟熟悉GraphQL核心概念，但是可能已经超时了，不过我相信你对GraphQL中的核心概念已经比较熟悉了。但是它本身所涉及的东西远远比这个丰富，同时它还处于飞速的发展中。</p><p>最后我尝试根据这段时间的学习GraphQL的经验，提供一些进一步学习和了解GraphQL的方向和建议，仅供参考：</p><h2 id="想进一步了解GraphQL本身"><a href="#想进一步了解GraphQL本身" class="headerlink" title="想进一步了解GraphQL本身"></a>想进一步了解GraphQL本身</h2><p>我建议再仔细去官网，读一下官方文档，如果有兴趣的话，看看GraphQL的spec也是极好的。这篇文章虽然介绍了核心概念，但是其他一些概念没有涉及，比如Union、Interface、Fragment等等，这些概念均是基于核心概念之上的，在了解核心概念后，应当会很容易理解。</p><h3 id="偏向服务端"><a href="#偏向服务端" class="headerlink" title="偏向服务端"></a>偏向服务端</h3><p>偏向服务端方向的话，除了需要进一步了解GraphQL在某个语言的具体生态外，还需要了解一些关于缓存、上传文件等特定方向的东西。如果是想做系统迁移，还需要对特定的框架做一些调研，比如graphene-django。</p><p>如果是想使用GraphQL本身做系统开发，这里推荐了解一个叫做prisma的框架，它本身是在GraphQL的基础上构建的，并且与一些GraphQL的生态框架兼容性也较好，在各大编程语言也均有适配，它本身可以当做一个ORM来使用，也可以当做一个与数据库交互的中间层来使用。</p><h3 id="偏向客户端"><a href="#偏向客户端" class="headerlink" title="偏向客户端"></a>偏向客户端</h3><p>偏向客户端方向的话，需要进一步了解关于graphql-client的相关知识，我这段时间了解的是apollo，一个开源的grapql-client框架，并且与各个主流前端技术栈如Angular、React等均有适配版本，使用感觉良好。</p><p>同时，还需要了解一些额外的查询概念，比如分页查询中涉及的Connection、Edge等。</p><p>大概就这么多，如有错误，还望指正。</p>]]></content>
    
    <summary type="html">
    
      一文让你搞懂GraphQL。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
      <category term="API" scheme="https://tk208.github.io/categories/Tech/API/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="接口开发" scheme="https://tk208.github.io/tags/%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/"/>
    
      <category term="API调用" scheme="https://tk208.github.io/tags/API%E8%B0%83%E7%94%A8/"/>
    
      <category term="GraphQL" scheme="https://tk208.github.io/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>RPC vs REST vs GraphQL</title>
    <link href="https://tk208.github.io/RPC-vs-REST-vs-GraphQL/"/>
    <id>https://tk208.github.io/RPC-vs-REST-vs-GraphQL/</id>
    <published>2019-03-30T10:35:40.000Z</published>
    <updated>2019-03-31T05:40:59.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文作者是：<a href="https://segmentfault.com/a/1190000013961872" target="_blank" rel="noopener">littleLyon</a>，发布于 <a href="https://segmentfault.com/blog/littlelyon" target="_blank" rel="noopener">狮乐园</a>。</p><hr><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>先简单介绍下 <code>RPC</code> ，它是 <code>Remote Procedure Call(远程过程调用)</code> 的简称。一般基于 <code>RPC</code> 协议所设计的接口，是基于网络采用客户端/服务端的模式完成调用接口的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>简单并且易于理解（面向开发者）</p></li><li><p>轻量级的数据载体</p></li><li><p>高性能</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>对于系统本身耦合性高</p></li><li><p>因为RPC本身很简单、轻量，因此很容易造成 <code>function explosion</code></p></li></ul><p>关于 <code>RPC</code> 的优点其实很好理解，就是因为它性能高同时又很简单，但是我认为这是对于接口提供者来讲的（因为它的高耦合性）。</p><p>但是如果从接口调用者的角度来看，高耦合性就变成了缺点，因为高耦合意味着调用者必须要足够了解系统本身的实现才能够完成调用，比如：</p><ul><li><p>调用者需要知道所调用接口的函数名、参数格式、参数顺序、参数名称等等</p></li><li><p>如果 <code>接口提供者(server)</code> 要对接口做出一些改变，很容易对 <code>接口调用者(client)</code> 造成 <code>breaking change</code>（违背开闭原则)</p></li><li><p>一般 <code>RPC</code> 所暴露接口仅仅会暴露函数的名称和参数等信息，对于函数之间的调用关系无法提供，这意味着调用者必须足够了解系统，从能够知道如何正确的调用这些接口，但是对于接口调用者往往不需要了解过多系统内部实现细节</p></li></ul><p>关于上面的第二点，为了减少 <code>breaking change</code> ，我之前实现接口的时候一般都会引入版本的概念，就是在暴露接口的方法名中加入版本号，一开始效果确实不错，但是随后就不知不觉的形成了 <code>function explosion</code> 。</p><hr><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>当前 <code>REST</code> 风格的 <code>API</code> 架构方式已经成了主流解决方案了，相比较RPC，它的主要不同之处在于，它是对于 <code>资源(Resource)</code> 的模型化而非 <code>步骤(Procedure)</code> 。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li><p>对于系统本身耦合性低，调用者不再需要了解接口内部处理和实现细节</p></li><li><p>重复使用了一些 http 协议中的已定义好的部分状态动词，增强语义表现力</p></li><li><p><code>API</code> 可以随着时间而不断演进</p></li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>缺少约束，缺少简单、统一的规范</p></li><li><p>有时候 <code>payload</code> 会变的冗余 <code>(overload)</code> ，有时候调用 <code>api</code> 会比较繁琐(chattiness)</p></li><li><p>有时候需要发送多条请求已获取数据，在网络带宽较低的场景，往往会造成不好的影响</p></li></ul><p><code>REST</code> 的优点基本解决了 <code>RPC</code> 中存在的问题，就是解耦，从而使得前后端分离成为可能。接口提供者在修改接口时，不容易造成 <code>breaking-change</code> ，接口调用者在调用接口时，往往面向数据模型编程，而省去了了解接口本身的时间成本。</p><p>但是，我认为 <code>REST</code> 当前最大的问题在于虽然它利用 <code>http</code> 的动词约束了接口的暴露方式，同时增强了语义，但是却没有约束接口如何返回数据的最佳实践，总让人感觉只要是返回 <code>json</code> 格式的接口都可以称作 <code>REST</code> 。</p><p>我在实际工作中，经常会遇到第二条缺点所指出的问题，就是接口返回的数据冗余度很高，但是却缺少我真正需要的数据，因此不得已只能调用其他接口或者直接和后端商议修改接口，并且这种问题会在web端和移动端共用一套接口中被放大。</p><p>当前比较好的解决方案就是规范化返回数据的格式，比如 <code>json-schema</code> 或者自己制定的规范。</p><hr><h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><p><code>GraphQL</code> 是近来比较热门的一个技术话题，相比 <code>REST</code> 和 <code>RPC</code> ，它汲取了两者的优点，即不面向资源，也不面向过程，而是 <code>面向数据查询(ask for exactly what you want)</code>。</p><p>同时 <code>GraphQL</code> 本身需要使用强类型的 <code>Schema</code> 来对数据模型进行定义，因此相比 <code>REST</code> 它的约束性更强。</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li><p>网络开销低，可以在单一请求中获取REST中使用多条请求获取的资源</p></li><li><p>强类型Schema（约束意味着可以根据规范形成文档、IDE、错误提示等生态工具）</p></li><li><p>特别适合图状数据结构的业务场景（比如好友、流程、组织架构等系统）</p></li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>本身的语法相比较 <code>REST</code> 和 <code>RPC</code> 均复杂一些</p></li><li><p>实现方面需要配套 <code>Caching</code> 以解决性能瓶颈</p></li><li><p>对于 <code>API</code> 的版本控制当前没有完善解决方案（社区的建议是不要使API版本化）</p></li><li><p>仍然是新鲜事物，很多技术细节仍然处于待验证状态</p></li></ul><p>鉴于 <code>GraphQL</code> 这两个星期我也仅仅是做了一些简单地使用和了解，仅仅说一下感受。</p><p>首先值得肯定的是，在某些程度上确实解决了 <code>REST</code> 的缺点所带来的问题，同时配套社区建议的各种工具和库，相比使用 <code>REST</code> 风格，全栈开发体验上升一个台阶。</p><p>但是这个看起来很好的东西为什么没有火起来呢？我觉的最主要的原因是因为 <code>GraphQL</code>所带来的好处，大部分是对于接口调用者而言的，但是实现这部分的工作却需要接口提供者来完成。</p><p>同时 <code>GraphQL</code> 的最佳实践场景应当是类似像 <code>Facebook</code> 这样的网站，业务逻辑模型是图状数据结构，比如社交。如果在一些业务逻辑模型相对简单的场景，使用 <code>GraphQL</code> 确实不如使用 <code>REST</code> 来得简单明了、直截了当。</p><p>另外一方面是 <code>GraphQL</code> 的使用场景相当灵活，在我自己的调研项目中，我是把它当做一个类似 <code>ORM</code> 的框架来使用的，在别人的一些文章中，会把它当做一个中间层来做渐进式开发和系统升级。这应当算是另外一个优点。</p><h2 id="到底用哪个"><a href="#到底用哪个" class="headerlink" title="到底用哪个"></a>到底用哪个</h2><p>下面根据要设计的API类型给予一些技术选型建议。</p><p>如果是 <code>Management API</code> ，这类 <code>API</code> 的特点如下：</p><ul><li><p>关注于对象与资源</p></li><li><p>会有多种不同的客户端</p></li></ul><ul><li>需要良好的可发现性和文档</li></ul><ul><li>这种情景使用REST + JSON API可能会更好。</li></ul><p>如果是 <code>Command or Action API</code> ，这类 <code>API</code> 的特点如下：</p><ul><li>面向动作或者指令</li></ul><ul><li>仅需要简单的交互</li></ul><ul><li>这种情况使用RPC就足够了。</li></ul><p>如果是 <code>Internal Micro Services API</code> ，这类 <code>API</code> 的特点如下：</p><ul><li>消息密集型</li></ul><ul><li>对系统性能有较高要求</li></ul><ul><li>这种情景仍然建议使用RPC。</li></ul><p>如果是 <code>Micro Services API</code> ，这类 <code>API</code> 的特点如下：</p><ul><li>消息密集型</li></ul><ul><li>期望系统开销较低</li></ul><ul><li>这种情景使用RPC或者REST均可。</li></ul><p>如果是 <code>Data or Mobile API</code> ，这类 <code>API</code> 的特点是：</p><ul><li>数据类型是具有图状的特点</li></ul><ul><li>希望对于高延迟场景可以有更好的优化</li></ul><ul><li>这种场景无疑GraphQL是最好的选择。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>提供一张表格来总览它们之间在不同指标下的表现：</p><table><thead><tr><th>name</th><th style="text-align:center">耦合性</th><th style="text-align:center">约束性</th><th style="text-align:center">复杂度</th><th style="text-align:center">缓存</th><th style="text-align:center">可发现性</th><th style="text-align:center">版本控制</th></tr></thead><tbody><tr><td>RPC<br>(Function)</td><td style="text-align:center">high</td><td style="text-align:center">medium</td><td style="text-align:center">low</td><td style="text-align:center">custom</td><td style="text-align:center">bad</td><td style="text-align:center">hard</td></tr><tr><td>REST<br>(Resource)</td><td style="text-align:center">low</td><td style="text-align:center">low</td><td style="text-align:center">low</td><td style="text-align:center">http</td><td style="text-align:center">good</td><td style="text-align:center">easy</td></tr><tr><td>GraphQL<br>(Query)</td><td style="text-align:center">medium</td><td style="text-align:center">high</td><td style="text-align:center">medium</td><td style="text-align:center">custom</td><td style="text-align:center">good</td><td style="text-align:center">???</td></tr></tbody></table><p>最后引用人月神话中的观点 <code>no silver bullet</code> ，在技术选型时需要具体情况具体分析，不过鉴于 <code>GraphQL</code> 的灵活性，把它与 <code>RPC</code> 和 <code>REST</code> 配置使用，也是不错的选择。</p>]]></content>
    
    <summary type="html">
    
      一文让你搞懂接口开发规范。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
      <category term="API" scheme="https://tk208.github.io/categories/Tech/API/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="接口开发" scheme="https://tk208.github.io/tags/%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/"/>
    
      <category term="API调用" scheme="https://tk208.github.io/tags/API%E8%B0%83%E7%94%A8/"/>
    
      <category term="RPC-REST-GraphQL" scheme="https://tk208.github.io/tags/RPC-REST-GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>极简主义</title>
    <link href="https://tk208.github.io/%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/"/>
    <id>https://tk208.github.io/极简主义/</id>
    <published>2019-02-28T09:34:30.000Z</published>
    <updated>2019-03-31T05:40:59.330Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://image.tracup.com/c367057643e68e8100bf0db748601aa8" alt="极简.jpg" title="路德维希·密斯·凡德罗, 四大现代建筑大师之一（1886年3月27日－1969年8月17日）。"></p><h4 id="“Less-is-more”-是德国建筑师-路德维希·密斯·凡德罗（Ludwig-Mies-Van-der-Rohe）-在上个世纪提出的现代建筑设计哲学。"><a href="#“Less-is-more”-是德国建筑师-路德维希·密斯·凡德罗（Ludwig-Mies-Van-der-Rohe）-在上个世纪提出的现代建筑设计哲学。" class="headerlink" title="“Less is more” 是德国建筑师 路德维希·密斯·凡德罗（Ludwig Mies Van der Rohe） 在上个世纪提出的现代建筑设计哲学。"></a>“Less is more” 是德国建筑师 路德维希·密斯·凡德罗（Ludwig Mies Van der Rohe） 在上个世纪提出的现代建筑设计哲学。</h4><p>汉语直译过来意思是：少即是多。</p><p>看似自相矛盾的一句话，却高度浓缩了现代设计理念的精髓。</p><p>随着时代发展，这种理念不仅深刻影响了现代建筑的风格，而且深刻影响了当今人们生活的方方面面，并日益成为一种越来越被人们信奉的生活方式和人生信条。</p><p><img src="https://image.tracup.com/5f7b534ebd4f6a98cbddc18ee20c16d5" alt="简约1.jpg" title="极简风格的建筑"></p><hr><p>2</p><h3 id="思想家往往都是孤独者。"><a href="#思想家往往都是孤独者。" class="headerlink" title="思想家往往都是孤独者。"></a>思想家往往都是孤独者。</h3><p><img src="https://image.tracup.com/42dbda537a7799c9338262a2fd4be200" alt="微信图片_20190228005238.jpg"></p><p><strong>路德维希·密斯·凡德罗</strong> 出生的年代是 1886 年，欧美正在工业化的浪潮中高歌猛进，社会日新月异，科技飞速发展，经济蓬勃向上，创新层出不穷。</p><p>资本主义社会的繁荣带来人口的快速增长，地面开始变得越来越拥挤，随之而生的对大规模居住场所的需求成为建筑学界必须要解决的问题。</p><p>当时，人类对建造技术的掌握还停滞在几个世纪前取得的辉煌经验中。</p><hr><p>3.</p><h3 id="东方：天人合一"><a href="#东方：天人合一" class="headerlink" title="东方：天人合一"></a>东方：天人合一</h3><p><img src="https://image.tracup.com/57368bb5b15c65eef4d512da1a6f2080" alt="100g090000003ti9eC154.jpg" title="现存的唯一完整保留中国盛唐建筑风格的 唐招提寺 ，位于日本奈良"></p><p>在东方，纵观中国两千多年的文明史，在唐朝达到顶峰后即走向没落。</p><p>中国古建造材料长期以砖石为基，木料为主。虽然极具创造性的发明了 榫卯 结构，使得木材可以不用一根钉子亦能严丝合缝。</p><p>但受限于木材 易燃，易潮，易虫蛀，承受荷载的能力有限 等先天性不足的限制，中国古代单个建筑体体量和高度都不大（相较于同期的欧洲建筑），往往以建筑集群的方式来扩大占地面积。最具代表性的就是四合院。</p><p><img src="https://image.tracup.com/3394013a1c0fd9bba3eadbedbf84a83e" alt="火狐截图_2019-02-28T06-18-26.731Z.png" title="中国古建筑的营造法式"></p><p><img src="https://image.tracup.com/d86eac90f71b007d2b5463907cd94cd2" alt="127910897_1547213153320_mthumb.jpg" title="明清建筑风格的故宫"></p><hr><p>4.</p><h3 id="西方：虔诚的信仰"><a href="#西方：虔诚的信仰" class="headerlink" title="西方：虔诚的信仰"></a>西方：虔诚的信仰</h3><p><img src="https://image.tracup.com/4d901e07c72377d1ce3ef90c4f30d85a" alt="微信图片_20190228005130.jpg"></p><p>公元 313 年，罗马帝国宣布基督教为国教。</p><p>因为罗马帝国前后绵延近两千年的横跨欧亚的统治存在（前 27～476 年/ 1453 年，西罗马帝国 于 476 年灭亡，东罗马帝国 于 1453 年灭亡）。</p><p>因此 <strong>宗教信仰</strong> 牢牢占据欧洲人的头脑长达一千多年，并成为其世界观，人生观和价值观形成的基石。</p><p>在欧洲三大思想解放运动之前（文艺复兴、宗教改革、启蒙运动），欧洲人中的社会精英，包括早期科学家、艺术家、思想家，绝大部分都是从修道院或神学院涌现出来的，中国最早了解西方的科学技术也是通过西方传教士。</p><p>一旦有可能，西欧人愿意把毕生的智慧、财富等等一切都奉献给教会，以证明自己的信仰虔诚而笃定。</p><p>西方的建筑哲学也生动反映了这一点。</p><p><img src="https://image.tracup.com/d2cdf1e791062a2fb9084a9b6c745827" alt="微信图片_20190228005139.jpg"></p><p><img src="https://image.tracup.com/c00d89b26a8a1a53dc6c476378d046ee" alt="微信图片_20190228005143.jpg"></p><p>所以，今天在整个欧洲看到的 最华丽、最壮观、最艺术、最震撼 的建筑物几乎都是<strong>大教堂</strong>。</p><p><img src="https://image.tracup.com/e2d3973cf14dba0212f1af3e084aabd8" alt="微信图片_20190228005125.jpg"></p><p><img src="https://image.tracup.com/fe688aed0bbee27ff5564e08cac51ffb" alt="微信图片_20190228155400.jpg"></p><p>很多大教堂的修建动辄几百年之久，耗时之长，用工之精，费财之巨，纵观整个人类发展史都不禁赞叹。</p><p><img src="https://image.tracup.com/1760f9779cd3be6cd8f78d9971ce84ba" alt="微信图片_20190228154504.jpg"></p><p>在对大教堂旷日持久的精雕细琢中，欧洲人把掌握的建造技术和工艺应用开来，形成了独特的哥特式的式样和奢华的维多利亚风格。</p><p><img src="https://image.tracup.com/a653d6cb2eb44672c200c4a70b0eadca" alt="微信图片_20190228004649.jpg" title="最贵最华丽的材料，最精细的雕琢 营造的奢华感 是欧洲古典艺术最鲜明的特征，壁画 和 雕塑 都是反映古希腊神话或耶稣基督的表现形式"></p><p>欧洲古典建筑复杂而华丽。</p><p>尖塔、廊柱、窗洞、拱顶，极度强调 艺术感染力 的理念。</p><p>使其深刻体现着 宗教神话 对世俗生活的影响。</p><p>但是，这样的建筑是无法工业化大批量生产的。</p><p>无法满足人口爆发式增长，以及普通民众收入大幅提高对居住环境改善的刚性需求。</p><hr><p>5.</p><h3 id="先驱者的决心"><a href="#先驱者的决心" class="headerlink" title="先驱者的决心"></a>先驱者的决心</h3><p><img src="https://image.tracup.com/e9c910f73a849ef5c93042c134d69287" alt="微信图片_20190228100024.jpg" title="耸立在巴黎市中心的埃菲尔铁塔，向世界第一次证明钢铁可以用来做高层建筑。"></p><p>1889 年，法国为显示国力，举办了世界博览会。</p><p>法国建筑大师 <strong>古斯塔夫·埃菲尔</strong> 大胆创新，首次采用钢铁作为建筑材料，打造了当时全世界最高的铁塔（300米）。</p><p>铁塔一边建，质疑声一边铺天盖地。</p><p>反对方全部是文化、艺术、建筑等领域的精英，甚至包括文坛巨匠莫泊桑、小仲马等数百人联名向政府提交了抗议书。</p><p>一些数学家甚至“预测”铁塔建到两百多米会倒塌，还有一些专家则“预测”铁塔上的灯光会杀死河水里的所有鱼。</p><p>成功的路上总会充满质疑和嘲笑，但结果会给出最好的回答。</p><p><img src="https://image.tracup.com/267c9c093481101c97a207dc85f0a4b8" alt="微信图片_20190228095948.jpg" title="巴黎市中心的拿破仑凯旋门和埃菲尔铁塔，现在成了法国人的骄傲。"></p><hr><p>6.</p><h3 id="实践是检验真理的唯一标准。"><a href="#实践是检验真理的唯一标准。" class="headerlink" title="实践是检验真理的唯一标准。"></a>实践是检验真理的唯一标准。</h3><p><img src="https://image.tracup.com/36172e494ce6b774ee9d59ad69208ce7" alt="微信图片_20190228005229.jpg" title="现代设计就是用最简单的方形和圆形营造最实用空间的哲学。"></p><p>路德维希·密斯·凡德罗 为代表的一批建筑大师，摒弃华而不实的欧洲古典艺术理念，大胆使用 钢筋混凝土、玻璃等最适合大规模工业生产的新型建筑材料，不加任何多余的装横雕饰，用最直接的线条，赢得最实用的空间。</p><p>这就是 现代设计理念：<strong>极简主义（Less is more）</strong>。</p><hr><ol start="7"><li><h3 id="一千个读者有一千个哈姆雷特"><a href="#一千个读者有一千个哈姆雷特" class="headerlink" title="一千个读者有一千个哈姆雷特"></a>一千个读者有一千个哈姆雷特</h3></li></ol><p><img src="https://image.tracup.com/4bc9e1fbb9239aac022735eeccf4c003" alt="5.jpg"></p><p>在物质过剩的今天，极简主义已经不仅仅是一种设计理念，而升华为人生哲学。</p><p>不同的人对极简主义的理解和角度不一样。</p><p>于我而言，当前最紧要的就是简化自己的欲望，把头脑清空，将精力聚焦在一件最值得投入的事情上。</p>]]></content>
    
    <summary type="html">
    
      Less is more.
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感悟" scheme="https://tk208.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>元宵节快乐！</title>
    <link href="https://tk208.github.io/%E5%85%83%E5%AE%B5%E8%8A%82%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
    <id>https://tk208.github.io/元宵节快乐！/</id>
    <published>2019-02-19T13:40:53.000Z</published>
    <updated>2019-03-30T10:52:18.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="元宵节"><a href="#元宵节" class="headerlink" title="元宵节"></a>元宵节</h3><p>是中国最重要的传统节日之一。</p><p><img src="https://image.tracup.com/c0180c0345515add36801b47faa0b0fa" alt="DpgiA1bKgaCAMTA7AAFQy1akRzg445.jpg"></p><p>今天是农历正月十五，</p><p>是 2019 年的第一个月圆之夜。</p><p><img src="https://image.tracup.com/b5cd6521d2da8e987f1fa12979a6d524" alt="trBO-fxpruna1264921.jpg"></p><p>标志着春节休息假期的正式结束。</p><p><img src="https://image.tracup.com/33dcad056318894b43133884f9f0fef3" alt="微信图片_20190219170851.jpg"></p><p>今天夜晚之后，一元复始，大地回春。</p><p>新的一年，加油吧！</p>]]></content>
    
    <summary type="html">
    
      祝大家元宵节快乐！
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="节日" scheme="https://tk208.github.io/tags/%E8%8A%82%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://tk208.github.io/JavaScript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89const-var-let%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://tk208.github.io/JavaScript中变量的定义const-var-let的区别/</id>
    <published>2019-02-17T09:13:55.000Z</published>
    <updated>2019-03-30T10:52:18.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>JavaScript 从一门浏览器脚本语言，最初仅仅用来实现页面动态效果，发展到今天横跨前端（ES5/ES6）和后端（Node.js）几乎无所不能，越来越多的展示出她的灵活、强大。</p><h2 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h2><h3 id="ECMA-是“European-Computer-Manufactures-Association”的缩写，中文称欧洲计算机制造联合会。是一个用于统一国际电脑标准的组织。"><a href="#ECMA-是“European-Computer-Manufactures-Association”的缩写，中文称欧洲计算机制造联合会。是一个用于统一国际电脑标准的组织。" class="headerlink" title="ECMA 是“European Computer Manufactures Association”的缩写，中文称欧洲计算机制造联合会。是一个用于统一国际电脑标准的组织。"></a>ECMA 是“European Computer Manufactures Association”的缩写，中文称欧洲计算机制造联合会。是一个用于统一国际电脑标准的组织。</h3><p>它的办事机构在瑞士日内瓦，和其他的国际标准化组织一样，比如著名的ISO（国际标准组织）以及IEC（国际电工标准化机构）总部。</p><h3 id="JavaScript-是美国网景公司（Netscape）的程序员布兰登·艾奇（Brendan-Eich）在-1995-年发明的运行在网页的脚本语言。一年前的-1994-年，当时的网景公司开发了全世界第一款浏览器。"><a href="#JavaScript-是美国网景公司（Netscape）的程序员布兰登·艾奇（Brendan-Eich）在-1995-年发明的运行在网页的脚本语言。一年前的-1994-年，当时的网景公司开发了全世界第一款浏览器。" class="headerlink" title="JavaScript 是美国网景公司（Netscape）的程序员布兰登·艾奇（Brendan Eich）在 1995 年发明的运行在网页的脚本语言。一年前的 1994 年，当时的网景公司开发了全世界第一款浏览器。"></a>JavaScript 是美国网景公司（Netscape）的程序员<a href="https://baike.baidu.com/item/Brendan%20Eich" target="_blank" rel="noopener">布兰登·艾奇（Brendan Eich）</a>在 1995 年发明的运行在网页的脚本语言。一年前的 1994 年，当时的网景公司开发了全世界第一款浏览器。</h3><p>Brendan Eich 是一名 Scheme 语言程序员，他的兴趣和方向主要是函数式编程。网景公司招聘他的初衷，是研究将 Scheme 语言作为网页脚本语言的可能性。</p><p><img src="https://image.tracup.com/4d5a488401bc1a60be10345ec778b8ea" alt="BEich.jpg" title="JS之父"></p><p>就在这时发生了一件大事，Sun 公司将 Java 正式向市场推出。并大肆宣传，许诺这种语言可以”一次编写，到处运行”( Write Once, Run Anywhere )，它看上去很可能成为未来的主宰。</p><p>网景公司动了心，网景公司的整个管理层都成了 Java 语言的粉丝。不仅允许 Java 程序以 applet (小程序)的形式，直接在浏览器中运行；甚至还考虑直接将 Java 作为脚本语言嵌入网页。</p><p>但是发现这样太复杂，于是公司安排 Brendan Eich 开发一种全新的脚本语言，但是必须要和 java 非常像，同时要比 java 简单，让没学过编程的人也能很快上手。</p><p>所以，Brendan Eich 是被赶鸭子上架的。</p><p>他自己本人对这个项目完全没有一点兴趣，因为公司要求新语言和 java 要非常像，就意味着要开发一款面向对象的语言。而他最擅长最喜欢的恰恰是 Scheme 这种非面向对象的函数式编程。</p><p>为了应付公司安排的任务，他只用 10 天时间就把 Javascript 设计出来了。</p><p>可想而知，Javascript 的诞生是多么的仓促和草率。这也导致后来很长一段时间，Javascript 写出来的程序混乱不堪。</p><p>（自古成者为王败者寇，鉴于 Javascript 目前的江湖地位，我们把曾经因不严谨导致的混乱称之为灵活。）</p><p><img src="https://image.tracup.com/573dcae843083be7a09238f01ea46321" alt="浏览器.jpg"></p><p>一年后的的 1996 年，和微软的 IE 浏览器激战正酣之际，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准，继而得到更大的推广和更好的发展。</p><p>次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><h4 id="因此，ECMAScript-和-JavaScript-的关系是，前者是后者的规格，后者是前者的一种实现（另外的-ECMAScript-方言还有-JScript（微软对ECMAScript规范的实现）-和-ActionScript（遵循ECMAscript规范的Adobe-Flash-Player运行时的实现））。日常场合，这两个词是同一种意思。"><a href="#因此，ECMAScript-和-JavaScript-的关系是，前者是后者的规格，后者是前者的一种实现（另外的-ECMAScript-方言还有-JScript（微软对ECMAScript规范的实现）-和-ActionScript（遵循ECMAscript规范的Adobe-Flash-Player运行时的实现））。日常场合，这两个词是同一种意思。" class="headerlink" title="因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript（微软对ECMAScript规范的实现） 和 ActionScript（遵循ECMAscript规范的Adobe Flash Player运行时的实现））。日常场合，这两个词是同一种意思。"></a>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript（微软对ECMAScript规范的实现） 和 ActionScript（遵循ECMAscript规范的Adobe Flash Player运行时的实现））。日常场合，这两个词是同一种意思。</h4><h4 id="目前，JavaScript-包含三个部分：ECMAScript（核心），DOM（文档对象模型），BOM（浏览器对象模型）。ECMAScript-是-JS-语言的基础。"><a href="#目前，JavaScript-包含三个部分：ECMAScript（核心），DOM（文档对象模型），BOM（浏览器对象模型）。ECMAScript-是-JS-语言的基础。" class="headerlink" title="目前，JavaScript 包含三个部分：ECMAScript（核心），DOM（文档对象模型），BOM（浏览器对象模型）。ECMAScript 是 JS 语言的基础。"></a>目前，JavaScript 包含三个部分：ECMAScript（核心），DOM（文档对象模型），BOM（浏览器对象模型）。ECMAScript 是 JS 语言的基础。</h4><p>JavaScript 进入国际标准化组织后发展很快，每年都会推出新版本。</p><h3 id="ECMAScript的各个版本：（从第三版开始说）"><a href="#ECMAScript的各个版本：（从第三版开始说）" class="headerlink" title="ECMAScript的各个版本：（从第三版开始说）"></a><a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin" target="_blank" rel="noopener">ECMAScript的各个版本</a>：（从第三版开始说）</h3><ol><li><p>第三版 ECMAScript3 新增了对正则表达式、新控制语句、try-catch 异常处理的支持，修改了字符处理、错误定义和数值输出等内容。标志着ECMAScript 成为了一门真正的编程语言。</p></li><li><p>第四版于 2008 年 7 月发布前被废弃（原因步子迈的太大，功能新增太多太复杂，厂商分歧严重，后来一部分演变成为 ES6）。</p></li><li><p>第五版 ECMAScript5 力求澄清第 3 版中的歧义，并添加了新的功能。新功能包括：原生JSON对象、继承的方法、高级属性的定义以及引入严格模式。</p></li><li><p>第六版 ECMAScript6 是继 ES5 之后的一次主要改进，增添了许多必要的特性，例如：模块和类以及一些实用特性，Maps、Sets、Promises、生成器（Generators）等。</p></li></ol><h2 id="ES5-ECMAScript-5-1"><a href="#ES5-ECMAScript-5-1" class="headerlink" title="ES5 (ECMAScript 5.1)"></a>ES5 (ECMAScript 5.1)</h2><p>第五版 ECMAScript5 发布后，JavaScript 这门语言基本趋于成熟和稳定了。其中，ECMAScript 5.1 版本还成为了 ISO 国际标准（ISO/IEC 16262:2011）。因此，ES5 也得到了各大浏览器厂商的大力支持（微软的 IE 除外）。</p><h3 id="ES5-浏览器的支持情况"><a href="#ES5-浏览器的支持情况" class="headerlink" title="ES5 浏览器的支持情况"></a>ES5 浏览器的支持情况</h3><p>IE8 只支持 defineProperty、getOwnPropertyDescriptor 的部分特性和 JSon 的新特性，IE9 支持除了 <strong>严格模式（use strict）</strong> 以外的新特性，IE10 和其他主流浏览器都支持了。</p><p>因此在 <strong>PC 端开发</strong> 的时候，要注意 IE9 以下的兼容性， <strong>移动端开发</strong> 时，可以放心使用 ES5。</p><p>ES5 的更多新特性，请<a href="https://www.tuicool.com/articles/vMv6b2z" target="_blank" rel="noopener">点击这里</a>。</p><h2 id="ES6-ECMAScript-2015"><a href="#ES6-ECMAScript-2015" class="headerlink" title="ES6 (ECMAScript 2015)"></a>ES6 (ECMAScript 2015)</h2><p>Javascript 的支持者们希望这门语言能更强，为了能用它来编写复杂的大型应用程序，成为企业级开发语言。</p><p>2015 年 6 月 17 日，ECMAScript 6 发布正式版本，即 ECMAScript 2015。这是 ES6 的第一个版本。</p><p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。</p><p>根据计划，2017 年 6 月发布 ES2017 标准。</p><p>所以，ES6 涵盖了 ES2015、ES2016、ES2017，通常指“下一代 JavaScript 语言”。</p><p>ES6 的更多新特性，请<a href="http://www.cnblogs.com/Wayou/p/es6_new_features.html" target="_blank" rel="noopener">点击这里</a>。</p><p><strong>注意：</strong></p><p>ES2015 不等于 ES5。</p><hr><p><img src="https://image.tracup.com/1d6b771a75fc7d1f97b2359736f13a52" alt="1.jpg"></p><p>既然是 ES6 是下一代的语言，那么它究竟有多么超前呢？</p><p>我们来看一个简单的例子：</p><h2 id="ES6-声明变量的六种方法"><a href="#ES6-声明变量的六种方法" class="headerlink" title="ES6 声明变量的六种方法"></a>ES6 声明变量的六种方法</h2><h3 id="ES5-只有两种声明变量的方法：var-命令和-function-命令。"><a href="#ES5-只有两种声明变量的方法：var-命令和-function-命令。" class="headerlink" title="ES5 只有两种声明变量的方法：var 命令和 function 命令。"></a>ES5 只有两种声明变量的方法：var 命令和 function 命令。</h3><p><code>var 命令：用于定义变量。</code></p><p><strong>var定义的变量可以修改，如果不初始化会输出undefined，不会报错。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">var a;</span><br><span class="line">//不会报错，undefined</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'函数外var定义a：'</span> + a);</span><br><span class="line">//可以输出a=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">change</span></span>()&#123;</span><br><span class="line">  a = 4;</span><br><span class="line">  console.log(<span class="string">'函数内var定义a：'</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">change();</span><br><span class="line">//可以输出 a=4</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'函数调用后var定义a为函数内部修改值：'</span> + a);</span><br><span class="line">//可以输出a=4</span><br></pre></td></tr></table></figure><p><code>function 命令：用于定义函数或方法。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFunction(name,job)&#123;</span><br><span class="line">alert(<span class="string">"Welcome "</span> + name + <span class="string">", the "</span> + job);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-则在此基础上，另外添加了-let-、const-、import-、-class-命令。"><a href="#ES6-则在此基础上，另外添加了-let-、const-、import-、-class-命令。" class="headerlink" title="ES6 则在此基础上，另外添加了 let 、const 、import 、 class 命令。"></a>ES6 则在此基础上，另外添加了 let 、const 、import 、 class 命令。</h3><p><code>let是块级作用域，函数内部使用let定义后，对函数外部无影响。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> c = 3;</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'函数外let定义c：'</span> + c);</span><br><span class="line">//输出c=3</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">change</span></span>()&#123;</span><br><span class="line">  <span class="built_in">let</span> c = 6;</span><br><span class="line">  console.log(<span class="string">'函数内let定义c：'</span> + c);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">change();</span><br><span class="line">//输出c=6</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'函数调用后let定义c不受函数内部定义影响：'</span> + c);</span><br><span class="line">//输出c=3</span><br></pre></td></tr></table></figure><p><code>const定义的变量不可以修改，而且必须初始化。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const b = 2;</span><br><span class="line">//正确</span><br><span class="line"></span><br><span class="line">const b;</span><br><span class="line">//错误，必须初始化 </span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'函数外const定义b：'</span> + b);</span><br><span class="line">//有输出值2 </span><br><span class="line"></span><br><span class="line">b = 5;</span><br><span class="line">console.log(<span class="string">'函数外修改const定义b：'</span> + b);</span><br><span class="line">//无法输出，因为b已经被const定义过</span><br></pre></td></tr></table></figure><p><code>import用于从模块中加载方法。</code></p><blockquote><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。</p><p>其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>。</p><p>但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p>于是 ES6 借鉴其他语言的优秀之处，引入了模块 module 概念。</p></blockquote><p>ES6 模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 从fs模块加载 3 个方法，其他方法不加载。</span><br><span class="line">// 这种加载称为“编译时加载”或者静态加载</span><br><span class="line"></span><br><span class="line">import &#123; <span class="built_in">stat</span>, exists, readFile &#125; from <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure><p>Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用<code>import</code>取代<code>require</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.func1;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.func2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br></pre></td></tr></table></figure><p><code>class 则是借鉴了面向对象语言（比如 C++ 和 Java）用来定义实例对象。</code></p><p>基本上，ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><h3 id="所以，ES6-一共有-6-种声明变量的方法。"><a href="#所以，ES6-一共有-6-种声明变量的方法。" class="headerlink" title="所以，ES6 一共有 6 种声明变量的方法。"></a>所以，ES6 一共有 6 种声明变量的方法。</h3><p>目前，各大浏览器对 ES6 支持度已经越来越高了，超过 90% 的 ES6 语法特性都实现了。</p><p>对于剩下那 10% 可能的不兼容，你完全不必担心。</p><p>因为有 Babel 转码器、Traceur 转码器这些工具，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。其中 Babel 对 ES6 的支持程度比其它同类更高，而且 Babel 拥有完善的文档和一个很棒的在线交互式编程环境，因此用的比较多。</p><h3 id="这意味着，你可以用-ES6-的方式编写程序，又不用担心现有环境是否支持。"><a href="#这意味着，你可以用-ES6-的方式编写程序，又不用担心现有环境是否支持。" class="headerlink" title="这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。"></a>这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 转码前</span><br><span class="line">input.map(item =&gt; item + 1);</span><br><span class="line"></span><br><span class="line">// 转码后</span><br><span class="line">input.map(<span class="keyword">function</span> (item) &#123;</span><br><span class="line">  <span class="built_in">return</span> item + 1;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端的小知识点。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
      <category term="JavaScript" scheme="https://tk208.github.io/categories/Tech/JavaScript/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Javascipt" scheme="https://tk208.github.io/tags/Javascipt/"/>
    
      <category term="变量的定义" scheme="https://tk208.github.io/tags/%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    
      <category term="const" scheme="https://tk208.github.io/tags/const/"/>
    
      <category term="var" scheme="https://tk208.github.io/tags/var/"/>
    
      <category term="let" scheme="https://tk208.github.io/tags/let/"/>
    
      <category term="ES5" scheme="https://tk208.github.io/tags/ES5/"/>
    
      <category term="ES6" scheme="https://tk208.github.io/tags/ES6/"/>
    
      <category term="ECMAScript" scheme="https://tk208.github.io/tags/ECMAScript/"/>
    
      <category term="ES2015" scheme="https://tk208.github.io/tags/ES2015/"/>
    
  </entry>
  
  <entry>
    <title>一周博览</title>
    <link href="https://tk208.github.io/%E4%B8%80%E5%91%A8%E5%8D%9A%E8%A7%88/"/>
    <id>https://tk208.github.io/一周博览/</id>
    <published>2019-02-15T05:56:51.000Z</published>
    <updated>2019-03-31T05:40:59.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>今天又是周五了，本文节选自 <strong>阮一峰</strong> 的每周发布，剔除了技术性文章，主要介绍国外的最新报道，关于科技在社会生活中的最新实践，有些技术实践国内的 IT 巨头也在大力推广中，如果没有，那或许就是下一个风口，值得关注。</p><hr><ol><li><a href="https://yellrobot.com/amazon-delivery-robot-scout-autonomous-snohomish/" target="_blank" rel="noopener">亚马逊（Amazon）的自动配送车</a></li></ol><p><img src="https://image.tracup.com/74407ebe0ddcceacda2a9ea8a4a95184" alt="bg2019021503.jpg"></p><p>美国电商巨头 <strong>亚马逊</strong> 在华盛顿州（该公司总部所在地），开始试验自动送货车。该车是电动的，跟小冰箱差不多大，能沿着人行道快速前进。它配备了传感器和 GPS，可以自动规划行进路线，避免跟行人、宠物或其他障碍发生碰撞。</p><p>测试期间，每辆车送货的时候，会有一个员工跟在后面，处理各种可能的问题。如果测试顺利，亚马逊将扩大试验范围，并考虑将其投入实用。</p><p><img src="https://image.tracup.com/dbdd365759ed112aaa33d5bb0126155c" alt="1.jpg"></p><p><img src="https://image.tracup.com/fa746f028b3a51c5137b5792617abfac" alt="2.jpg"></p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><blockquote><p><img src="https://image.tracup.com/ac03c5733df7e66bddb744eaa2839b92" alt="亚马逊.jpg"></p><p>亚马逊是全世界最早的电商平台（1995 年），也是目前全世界最大的电子商务公司，也是美国所有上市公司中市值排名第二的 IT 巨头（仅次于苹果）。</p><p>在 2018 年 9 月 5 日，亚马逊股价首次突破 1 万亿美元，成为继苹果公司后第二家市值超过 1 万亿美元的上市公司。</p><p>其创始人 <strong>杰夫·贝佐斯（Jeff Bezos）</strong> 也在 2018 年以 1120 亿美元的身价首登全球首富的宝座。</p><p>得益于美国股市的强劲增长，最高时其个人资产达到 1500 亿美元（近 1 万亿人民币）, 成为人类现代史上最有钱的人。比第二名的比尔盖茨还要多出 550 亿美元。</p><p><img src="https://image.tracup.com/9eb8651095d57460f551744ed767b559" alt="富豪.jpeg"></p><p>京东的模式几乎完整的复制模仿了亚马逊。</p></blockquote><hr><ol start="2"><li>优步（Uber）的<a href="https://www.bloomberg.com/news/articles/2019-01-23/boeing-s-flying-car-takes-off-to-show-a-glimpse-of-the-future" target="_blank" rel="noopener">飞行汽车</a>。</li></ol><p><img src="https://image.tracup.com/68f12481c0d4b00f96848a5018923296" alt="优步飞行汽车.jpg"></p><p>1 月 22 日，波音公司在弗吉尼亚州第一次试飞了它开发的飞行汽车。这其实不能算汽车，因为它不能在地面上行驶，只能在大楼之间飞行，从一幢楼顶飞到另一幢楼顶。</p><p>该产品是电动飞机，一次可以飞行 80 公里，比直升飞机成本更低，可控性更高。它是优步公司的定制车型，如果顺利的话，优步将采用它，在 2023 年推出空中出租车服务。此外，空中客车公司设计的空中汽车（见下图）也将在几周内试飞，目标也是 2023 年供优步公司使用。</p><p><img src="https://image.tracup.com/4979a957ec2ea993ff3d72c64e3b9ae5" alt="优步飞.jpg"></p><h3 id="延伸阅读-1"><a href="#延伸阅读-1" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><blockquote><p><img src="https://image.tracup.com/1dad9456dacbf076348c705832853a69" alt="优步.jpg"></p></blockquote><blockquote><p>美国的 Uber 公司是全球第一家通过打车软件提供出行服务的公司（2009 年）。</p><p>三年后的2012 年，北京才出现了中国第一家提供手机软件打车服务的公司: 滴滴打车。四年的价格拼杀后，滴滴将优步在中国的子公司合并（2016 年）。</p></blockquote><hr><ol start="3"><li>谷歌（Google）的 <a href="https://spectrum.ieee.org/telecom/wireless/loons-balloons-will-fly-over-kenya-in-first-commercial-telecom-tryout" target="_blank" rel="noopener">Loon 项目</a>。</li></ol><p>Loon 是谷歌的母公司 Alphabet 发起的一个实验项目。它为那些没有 4G 网络的地区发射气球，信号基站就设置在气球上，因此人们就可以使用 4G 服务了。比起地面基站，气球基站的覆盖范围更大，而且没有障碍物阻挡信号。</p><p>气球会飞到距离地面 18 公里～ 25 公里的平流层，那里没有上下气流，所以气球会停留在同一个高度上。但是，横向的风是很大的问题。为了防止气球被吹走，Loon 带有风向观察功能，一旦发现有风吹来，它会自动上升或下降，避开风，尽量停留在同一个地点。</p><p>每个 Loon 气球实际上包含了两个气球。外层是一个充满氦气的气球，为整个产品提供所需的升力；内层是一个充满空气的内部气球，可以抽空或进气。当内层气球膨胀时，外层气球的氦被挤压到密度更高，从而降低升力，开始下降，反之开始上升。通过这种方式，Loon 的工程师可以控制气球的高度，也可以利用不同高度的风，使气球向需要的方向前进。</p><p><img src="https://image.tracup.com/a1e005579a6ac6fc4e5255854e304358" alt="谷歌.jpg"></p><p>利用这种导航方式，气球已经可以长距离发射。工程师在新西兰发射气球，然后操纵它飘到阿根廷和澳大利亚的目标地区。该项目计划2019年在肯尼亚提供 4G 通信服务，气球就将在波多黎各发射，然后飘过大西洋，到达肯尼亚。</p><p>气球通过自带的太阳能板获取电力，每只气球可以使用几百天。2017年，波多黎各飓风时期，地面通信都被摧毁了，Loon 气球成功地为灾区提供了手机信号。</p><hr><ol start="4"><li><a href="https://www.standard.co.uk/tech/gatwick-airport-trial-for-valetparking-robots-will-cut-hassle-for-travellers-a4046406.html" target="_blank" rel="noopener">泊车机器人</a>。</li></ol><p><img src="https://image.tracup.com/3d430b56c97665175f812c9a81653b16" alt="泊车.jpg"></p><p><strong>英国</strong> 盖特威克机场推出了代客泊车机器人，车主在下车区下车以后，使用手机 App 召唤泊车机器人，该机器人会自动把车拉到停车位。这样不仅可以节省时间，还可以将车紧凑地停满整个空间。</p><p>这个机器人实际上是一个自动的小型叉车，使用 GPS 定位，整个泊车过程之中都不需要使用车钥匙。该系统去年已经在巴黎戴高乐机场进行了5个月试用。</p><p><img src="https://image.tracup.com/d53423ddc8c30bf0ed3d9878d90ffeea" alt="泊车自动.jpg"></p><hr><ol start="5"><li><a href="https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free" target="_blank" rel="noopener">无车城市</a>。</li></ol><p>欧洲 <strong>挪威首都奥斯陆</strong> 市政府决定，拆除市区 700 多个停车位，用自行车道、小公园和长椅取代，为最终实现市中心无车做准备。政府的规划是，第一步取消停车位，第二步在一些街道禁止自驾车，第三步则是整个市中心无车，交通需求完全依靠公共交通或自行车。</p><p><img src="https://image.tracup.com/b5a385f0c378028ff3f2c97fcadce64e" alt="挪威.jpg"></p><h3 id="延伸阅读-2"><a href="#延伸阅读-2" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><blockquote><p><img src="https://image.tracup.com/af0d95b8be18fc212d0656a835e5b0b2" alt="挪威1.jpg"></p></blockquote><blockquote><p><strong>挪威</strong> 是最靠近北极的国家之一，一个高度发达的资本主义国家，也是当今世界上最富有的国家之一。人均收入长期位于全球前三，是中国的 8.5 倍（2017 年数据）。</p><p>自 2001 年起挪威已连续六年被联合国评为最适宜居住的国家，并于 2009 年— 2018 年连续获得全球人类发展指数第一的排名。</p><p>2017 年，挪威被联合国评为世界上最幸福的国家。 2019 年 2 月，2018 年全球幸福指数出炉，挪威排名第二。</p></blockquote><p>（全文完）</p>]]></content>
    
    <summary type="html">
    
      国外科技在社会中的最新实践和变化。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="一周博览" scheme="https://tk208.github.io/tags/%E4%B8%80%E5%91%A8%E5%8D%9A%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>无用阶级之崛起---《人类简史》读后感</title>
    <link href="https://tk208.github.io/%E9%82%A3%E4%BA%9B%E6%97%A0%E7%94%A8%E7%9A%84%E4%BA%BA-%E3%80%8A%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>https://tk208.github.io/那些无用的人-《人类简史》读后感/</id>
    <published>2019-02-13T11:28:49.000Z</published>
    <updated>2019-02-13T12:58:07.267Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><p>最近，我读完了《人类简史》（中信出版社，2014）。</p><p><img src="https://image.tracup.com/fc5220e1a4a405ee65420ffbd5f19151" alt="bg2016081601.jpg"></p><p>它是以色列学者 <strong>尤瓦尔·赫拉利</strong> 写的畅销书，主要讲人类这个物种（即智人）的历史。全书最大特点就是，作者完全用自己的想法解释历史，有大量的独特观点。它不是学术著作，而是表达个人的历史观。</p><p><img src="https://image.tracup.com/2def90a61860a5375ac7010e57b94b26" alt="bg2016081602.jpg"></p><p>最惊人的一个观点，大概是他对人类的前途相当悲观，认为人类可能即将灭绝。</p><p>2.</p><p>全书最后一章的标题，叫做《智人末日》。</p><p>作者感叹道，人类社会存在了七万年，真正的大发展只是最近两三百年。但是，再过一千年，人类是否还会存在，已经很可疑了。 </p><p><img src="https://image.tracup.com/d0dbc9cc317357b54d6fbe58746c151f" alt="bg2016081603.jpg"></p><blockquote><p>“今天，人类正在让许多物种灭绝，甚至可能包括自己。如果今天发生核灾而让世界末日降临，人类将毁灭，而老鼠和蟑螂很可能继续生存下去。或许 6500 万年后，会有一群高智商的老鼠心怀感激地回顾人类造成的这场灾难。”</p><p>我们还有多久时间？没有人真正知道。如果智人的历史确实即将谢幕，我们这些最后一代的智人，或许该花点时间回答最后一个问题：我们究竟想要变成什么？”</p></blockquote><p>3.</p><p>尤瓦尔·赫拉利认为，人类可能灭绝的根本原因，在于技术的高速发展。</p><p>技术带来了现代化生活，也导致了前所未有的危机。别的不说，眼下的危机就是，短期内就会有大量失业出现，许多人将变得毫无用处。</p><blockquote><p>“技术造成的人力精简，将在今后 5 年内，导致全球发达国家失去 710 万个工作岗位，但在科技、专业服务及媒体领域，将创造 210 万个工作岗位。两相抵销之下，未来五年内，将会净损失 500 万个工作岗位，其中以行政工作与白领阶级为主。”</p><p>—- 摘自世界经济论坛《<a href="https://www.weforum.org/reports/the-future-of-jobs" target="_blank" rel="noopener">未来的工作</a>》，2016</p></blockquote><p>上一次的工业革命，体力劳动被替代了，比如，水车替代了拉磨，汽车替代了马车。这一次的信息技术革命，智力劳动将被替代，计算机替代我们做计算和判断。</p><p>体力岗位没了，人类可以从事智力岗位。可是，智力岗位也没了，人类去干什么呢？</p><p>4.</p><p>2016 年 5 月，美国达拉斯发生袭警案，一名狙击手放冷枪，打死了 5 个警察。最后，他被包围在一片建筑群里面，但不知道他的确切位置。</p><p><img src="https://image.tracup.com/9270f87593d5b660a56c915b87e7795d" alt="bg2016081605.jpg"></p><p>警方就派出一个<a href="http://tech.163.com/16/0711/08/BRMBAC1900097U80.html" target="_blank" rel="noopener">遥控机器人</a>，在建筑群里巡查，一发现目标，就扔出一颗炸弹，一下子就把罪犯炸死了。整个行动高效、快速，警方没有任何流血。更重要的是，这是历史上第一次，机器人警察杀死人类。</p><p><img src="https://image.tracup.com/b8786990beb5c40c77819049761d9509" alt="bg2016081606.jpg"></p><p>可以想象，随着犯罪行为的增加，以及罪犯装备的升级，机器人警察将会得到推广，取代人类警察打击犯罪。人类士兵也会被取代，以后的战争就是机器人战争。</p><p>《人类简史》作者的<a href="https://t.qianzhan.com/daka/detail/160526-5390c2d7.html" target="_blank" rel="noopener">公开</a>说：</p><blockquote><p>“未来可能不再需要司机。我们已经有了无人驾驶的汽车。他们不喝酒，不疲惫，比人类驾驶还要安全。当所有的汽车都变成了无人驾驶，我们就可以把所有的车辆联网，形成一个车联网。这样的话，交警可能也不需要了，因为所有的车都可以通过这张网络获取道路信息。”</p></blockquote><p>无人驾驶不仅会让司机和交警失业，而且长远来看，会消灭整个运输物流行业的工作岗位。比如，既然车辆可以自动到达目的地，那么送货的快递小哥也不需要了。</p><p>5.</p><p>人的价值体现在他/她的工作成果。如果有些人根本找不到工作，他们的价值体现在哪里呢？</p><p>过去，工业革命吸收了农业释放的数十亿人力，将人类的劳动形态从田野和作坊，变成了工厂和办公室；现在，工厂和办公室开始释放人力，又有什么行业可以吸收他们呢？</p><p>将来越来越多的人会发现，他们根本不可能找到工作。智力和体力两方面，机器都比人类能干。你要么比机器更能干，要么比机器更便宜，否则你怎么跟机器竞争工作岗位呢？</p><p>6.</p><p>有人说，技术会创造新工作，只要不断学习新的技能，就不用担心自己会被淘汰。这对一部人也许可以，但对大部分人这样要求是不现实的。</p><blockquote><p>“（世界经济论坛统计，目前的小学生长大后，65%会从事现在还不存在的工作。）孩子们在中学或者大学学到的大多数东西，等到40、50岁的时候可能都会变得无足轻重。如果他们还希望继续保住工作，那就得不断地改造自己，而且频率得越来越快才行。”</p></blockquote><p>不是每个人都善于学习，更不是每个人都具有学习的意愿。大多数人只希望生活舒适，不愿意动脑筋，去搞懂那些抽象的公式。而且，要求40、50岁的人跟刚走上社会的年轻人一样拼搏，也不现实。如果终生学习是唯一的就业出路，那对于多数人来说，就是没有出路。</p><p>7.</p><p>尤瓦尔·赫拉利说，人工智能取代了那些简单技能的工作岗位以后，人类当中会出现一个庞大的、无用的无产阶级。</p><blockquote><p>“未来，人类可能会分化为两个主要的等级：一个全新的更先进的精英阶级，很聪明，很富有，有更好的基因和更长的寿命；还有一个全新的一无用处的无产阶级，他们将越来越穷地等待死亡，可能变成没有工作、没有目标、整日靠吸毒度日、戴着VR头盔消磨时光的乌合之众。”</p></blockquote><p>人类社会的政治和经济结构，都会因此被颠覆。</p><p>当代国家建立在人对国家有用的基础上的，大部分人的角色是工人和士兵。如果这些角色被机器取代，那么底层的人们对国家来说，也就不再重要了。国家很可能会忽视他们的需求，只是出于社会稳定的目的，提供基本的生活资料。而人们也比以往更依赖政府，因为如果政府停止救济，他们就无法养活自己。</p><p><img src="https://image.tracup.com/246099df4776a3045c5fe2dbc5606911" alt="useless01.jpg"></p><p>尤瓦尔·赫拉利将这种情景，列为21世纪最悲惨的威胁之一。</p><blockquote><p>“随着人工智能变得越来越聪明，会有更多的人被挤出就业市场。没人知道大学该学什么，因为没人知道20岁的时候学的东西到了40岁还有没有用。等你知道的时候，已经有数十亿人变得一点用都没有了。这不是偶然，而是必然。”</p></blockquote><p>（全文完）</p>]]></content>
    
    <summary type="html">
    
      本文原载 2016 年第 32 期《财新周刊》,阮一峰著。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="转载" scheme="https://tk208.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="感想" scheme="https://tk208.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="书评" scheme="https://tk208.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>谈谈人类移民其他星球的现实非科幻问题</title>
    <link href="https://tk208.github.io/%E8%B0%88%E8%B0%88%E4%BA%BA%E7%B1%BB%E7%A7%BB%E6%B0%91%E5%85%B6%E4%BB%96%E6%98%9F%E7%90%83%E7%9A%84%E7%8E%B0%E5%AE%9E%E9%9D%9E%E7%A7%91%E5%B9%BB%E9%97%AE%E9%A2%98/"/>
    <id>https://tk208.github.io/谈谈人类移民其他星球的现实非科幻问题/</id>
    <published>2019-02-08T14:57:54.000Z</published>
    <updated>2019-03-31T05:40:59.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><hr><p>昨天的《流浪地球》影评一文，得到了一些网友的批评。</p><p>开发自己的博客网站之初，我开放了留言功能，就是希望能有一个自由表达和交流互动的空间。</p><h3 id="你可以不同意我的观点，但是我会坚决捍卫你说话的权力。"><a href="#你可以不同意我的观点，但是我会坚决捍卫你说话的权力。" class="headerlink" title="你可以不同意我的观点，但是我会坚决捍卫你说话的权力。"></a>你可以不同意我的观点，但是我会坚决捍卫你说话的权力。</h3><p>所以网友的言论，我不会因为个人的好恶而有选择的删除或屏蔽，也不会因为反对自己观点的言论而关闭留言板。</p><p>我会秉持互联网 <strong>自由、开放、包容</strong> 的原则，尽可能避免谈论敏感话题。这里不会出现”根据相关法律法规，本页面未予显示”的反互联网精神的提示。</p><h3 id="本博客为本人碎片化记录生活感悟和技术知识所用，不用于任何商业目的。"><a href="#本博客为本人碎片化记录生活感悟和技术知识所用，不用于任何商业目的。" class="headerlink" title="本博客为本人碎片化记录生活感悟和技术知识所用，不用于任何商业目的。"></a>本博客为本人碎片化记录生活感悟和技术知识所用，不用于任何商业目的。</h3><p>当然，如果你觉得我花时间和你分享的知识或观点还不错，也可以给本人打赏一杯咖啡，作为对本人劳动成果的一份尊重；如果你选择不打赏，你也不会失去什么，你还是能继续免费看到我的博客中的绝大部分内容。</p><hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h3 id="首先，我们来严肃的讨论一下-科幻。"><a href="#首先，我们来严肃的讨论一下-科幻。" class="headerlink" title="首先，我们来严肃的讨论一下 科幻。"></a>首先，我们来严肃的讨论一下 科幻。</h3><h4 id="科幻，是科学的幻想。"><a href="#科幻，是科学的幻想。" class="headerlink" title="科幻，是科学的幻想。"></a>科幻，是科学的幻想。</h4><blockquote><p>即根据有限的科学假设（某些东西的存在，某些事件的发生），在不与人类最大的可知信息量（如现有的科学理论，有据可考的事件记录）冲突的前提下，虚构可能发生的事件。</p></blockquote><p>简而言之，科幻必须建立在科学的基础上，且不违背现有的科学理论，虚构那些还未被科学证实的事情。</p><p>不讲科学的，天马行空的幻想，不是科幻，它叫 <strong>神话。</strong></p><p>早些年，因为对太空认知和技术视野的局限，科幻电影有各种脑洞大开的想象，比如人类发明的堪比光速的飞行器，与系外文明包括外星人、变异人之间的战争等等。</p><p>然而，随着这些年人类（主要是美国）对外层空间探索越来越多，对星际空间掌握程度逐年提高，加之地球环境不断恶化，人类对于星际移民的需求显得越来越迫切。</p><h4 id="如何更安全有效的操作航天飞行器？"><a href="#如何更安全有效的操作航天飞行器？" class="headerlink" title="如何更安全有效的操作航天飞行器？"></a>如何更安全有效的操作航天飞行器？</h4><h4 id="如何在太空中更合理的处置各种想到的和想不到的突发状况？"><a href="#如何在太空中更合理的处置各种想到的和想不到的突发状况？" class="headerlink" title="如何在太空中更合理的处置各种想到的和想不到的突发状况？"></a>如何在太空中更合理的处置各种想到的和想不到的突发状况？</h4><h4 id="如何在地球环境进一步恶化之前，抢先完成星际移民的技术储备和成功实践？"><a href="#如何在地球环境进一步恶化之前，抢先完成星际移民的技术储备和成功实践？" class="headerlink" title="如何在地球环境进一步恶化之前，抢先完成星际移民的技术储备和成功实践？"></a>如何在地球环境进一步恶化之前，抢先完成星际移民的技术储备和成功实践？</h4><h4 id="这些都日益成为备受关注和亟待解决的现实问题，而不再是遥不可及的、高枕无忧的幻想。"><a href="#这些都日益成为备受关注和亟待解决的现实问题，而不再是遥不可及的、高枕无忧的幻想。" class="headerlink" title="这些都日益成为备受关注和亟待解决的现实问题，而不再是遥不可及的、高枕无忧的幻想。"></a>这些都日益成为备受关注和亟待解决的现实问题，而不再是遥不可及的、高枕无忧的幻想。</h4><p>因此，近几年的主流科幻题材电影也越来越真实的反映这些需求，比如美国的《地心引力》、《火星救援》、《星际迷航》，俄罗斯的《太空救援》、《天际行者》。</p><h1 id="地球目前面临的问题"><a href="#地球目前面临的问题" class="headerlink" title="地球目前面临的问题"></a>地球目前面临的问题</h1><blockquote><p>以下数据均来自权威渠道，进入博客原文，点击蓝色的字体部分，你可以直接打开原文链接，均为英文原版。汉语部分来自于阮一峰的翻译，如果你需要转载以下数据，请勿用于商业用途或联系阮一峰本人获得授权许可。</p></blockquote><h2 id="气候变暖"><a href="#气候变暖" class="headerlink" title="气候变暖"></a>气候变暖</h2><p><img src="https://image.tracup.com/9cba83bb0303f3bf6b684c3d41e73416" alt="地球.jpg"></p><p><a href="https://www.theguardian.com/environment/2018/dec/02/world-verge-climate-catastophe" target="_blank" rel="noopener">2018 年的联合国气候大会认为</a>，气候变暖可能已经不可逆转了。我们无法将全球气温上升控制在 1.5 摄氏度以下，海水上升、珊瑚礁毁灭、沙漠扩散、冰川融化都无法避免了。</p><p>科学家描述 2100 年时，平均气温将比现在高 3~5 度，海平面上升 0.74 米至 1.8 米，足以淹没印度洋岛国，很多人口需要从低洼城市（比如珠江三角洲）搬迁（参见上面的想象图）。<a href="http://blog.sina.com.cn/s/blog_555b8d8b0102xbuw.html" target="_blank" rel="noopener">现在的地球人口总数是 74 亿</a>，2100 年可能达到 110 亿，随着人口增多，地球的生存环境将会变得更加恶劣。</p><p><img src="https://image.tracup.com/4ae79c2564dc653d821d3271c724cdec" alt="气候.jpg" title="图片说明：2018年6月的气温与1951-1980年平均气温的对比，来自推特@SimonLeeWx"></p><p>2018 年的夏天，全球高温创纪录。日本和韩国都是史上最高温，西班牙葡萄牙接近 48 度的欧洲高温纪录，北纬 71 度的一个挪威城市 32 度。要知道，北极圈是北纬 66.5 度，这就是说北极圈里面也是高温。上图是今年 6 月的气温与 40 年前的平均气温比较，可以看到都是偏高的，尤其是南北极远远偏高。</p><p>全球变暖已经是活生生的现实。科学家估计，目前的年平均气温比工业革命前已经升高了 1 度。《巴黎气候协议》的目标是，气温升高控制在 2 度，但是成功的希望据说只有 5%。如果学过统计学，你就知道，5%的机会在统计学上可以视作不会发生。</p><p>千万不要觉得，2 度不算什么，《纽约时报》描述了后果。</p><ul><li><p>升高 2 度：热带珊瑚礁灭绝，海平面上升几米，波斯湾不适合人类居住。</p></li><li><p>升高 3 度：北极的森林和大多数沿海城市被淹没。</p></li><li><p>升高 4 度：欧洲永久干旱， 中国、印度和孟加拉国大部分地区变成沙漠，美国科罗拉多河接近干涸，美国西南部将不适合居住。</p></li><li><p>升高 5 度：人类文明终结。</p></li></ul><p>联合国气候官员称，如果不采取任何行动，目前乐观的估计是全球会升高 3 度。</p><p>现在的计算是，如果人类排放 10000 亿吨二氧化碳，地球就会升高 2 度，目前人类已经排放了 6291 亿吨。<a href="http://trillionthtonne.org/" target="_blank" rel="noopener">有一个网站</a>实时显示目前排放了多少亿吨。</p><h4 id="下面是截至到-2019-2-9-23-01-北京时间-的最新数据"><a href="#下面是截至到-2019-2-9-23-01-北京时间-的最新数据" class="headerlink" title="下面是截至到 2019-2-9 23:01 (北京时间) 的最新数据:"></a>下面是截至到 2019-2-9 23:01 (北京时间) 的最新数据:</h4><p><img src="https://image.tracup.com/f9bbea6cdfbd66049edff1fb5d8c36cd" alt="排放_meitu_1.jpg"></p><p>根据计算，2036 年 3 月 7 日，人类将达到1万亿吨排放量。更热的日子还在后面。</p><p><a href="https://www.theguardian.com/cities/2018/nov/30/its-the-only-way-forward-madrid-bans-polluting-vehicles-from-city-centre" target="_blank" rel="noopener">西班牙首都马德里规定</a>，2018 年 12 月 1 日开始，只有零排放的车辆才能进入市中心。但是，实际执行的时候，只限制 2000 年之前登记的汽油车和 2006 年之前登记的柴油车。该市的目标是未来只有电动车和液化石油气车辆才能进入市区。</p><p><a href="https://www.detroitnews.com/story/business/autos/foreign/2018/12/05/vw-says-combustion-cars-will-fade-away/38677503/" target="_blank" rel="noopener">德国大众汽车公司表示</a>，该公司计划 2026 年推出最后一代汽油和柴油车，然后放弃内燃机汽车，全部转向电动汽车的生产。这是为了减少二氧化碳排放以应对气候变化。</p><p>2018 年底，德国最后一个煤矿宣布关闭，此后德国所需的煤炭将全部依赖进口。德国政府为了向清洁能源转型，取消了煤矿补贴。失去了政府补贴以后，煤矿无法生存下去，因此选择关门。1400 名煤矿工人将接受再就业培训。</p><h2 id="环境污染"><a href="#环境污染" class="headerlink" title="环境污染"></a>环境污染</h2><p>英国皇家统计学会评选出 2018 年的年度统计数据：全世界 90.5％ 的塑料垃圾从未被回收，其中大约 12％ 被焚烧，79％ 被填埋或抛弃在自然环境中。</p><p><img src="https://image.tracup.com/6d9dca16c99cbb7fda036fe112e6148e" alt="bg2018121434.jpg" title="太平洋中途岛环礁中发现的一只信天翁尸体，腹腔里面都是塑料垃圾。"></p><h2 id="更少的土地，更多的粮食"><a href="#更少的土地，更多的粮食" class="headerlink" title="更少的土地，更多的粮食"></a>更少的土地，更多的粮食</h2><p><img src="https://image.tracup.com/89744a33774d4ae73a73f4c18ebac462" alt="粮食.jpg"></p><p>未来几十年将发生气候灾难，这几乎是必然的。同时，世界人口还将继续增长，这就要求世界农业生产的大幅度改变，尽量减少对气候的破坏，同时为多出来的数十亿人口提供食物。</p><p>现在的情况是，农业使用了世界大约 40％ 的土地，并且占人类温室气体排放量的四分之一。根据预测，全球人口将从目前的 74亿 增长到 2050 年的近 110 亿，而且随着收入增加，每个人会消费更多的肉类，农业对环境的影响正在迅速扩大。</p><p>2050 年的世界农业需要比 2010 年多产出56％的卡路里。如果农民和牧场主通过开垦更多的森林来获得土地，那么根据计算，在现有的产出水平下，需要新增两个印度大小的土地，才能满足增加的粮食需求。另一方面，森林改造成农田的过程中，将释放大量的碳到大气中。</p><p>可持续农业体系的关键，在于说服消费者少吃肉类和不要浪费粮食。牛肉和羊肉的生产，会释放出大量的碳。甚至鸡肉都是更好的选择，因为鸡肉的环境影响，只是牛肉的八分之一。目前，科学家还在研究如何让牛不排放甲烷（一种很强的温室气体）。</p><p>减少排放的同时，还必须在现有耕地上种植更多的食物。但是，温度上升会降低作物产量，因此培育新的抗高温高产品种或防止土壤侵蚀，也很重要。另外，还可以发明一些其他措施，比如延长食物保鲜时间，防止腐烂。</p><p>我们可能还需要减少农作物的非粮食用途，例如减少用于生产车用乙醇的玉米，它们会与粮食作物竞争土地。</p><hr><p>以下内容为原创。</p><h1 id="星际移民"><a href="#星际移民" class="headerlink" title="星际移民"></a>星际移民</h1><h2 id="形势是严峻的。"><a href="#形势是严峻的。" class="headerlink" title="形势是严峻的。"></a>形势是严峻的。</h2><p>地球已经逐渐不适宜居住的情况下，像《流浪地球》中一样把整个地球搬走到其他星系显然是最差方案，最佳方案是一方面改善地球环境，另一方面把地球上的一部分人类迁移到其他星球居住。</p><p><img src="https://image.tracup.com/ad57acd99d3c0a8b31b212571092a473" alt="16pic_3412070_b.jpg"></p><h2 id="这时候，我们面临两个选择。"><a href="#这时候，我们面临两个选择。" class="headerlink" title="这时候，我们面临两个选择。"></a>这时候，我们面临两个选择。</h2><h3 id="选择一：移民到太阳系之外的其他行星上面。"><a href="#选择一：移民到太阳系之外的其他行星上面。" class="headerlink" title="选择一：移民到太阳系之外的其他行星上面。"></a>选择一：移民到太阳系之外的其他行星上面。</h3><p><img src="https://image.tracup.com/d724e000f05cb429cc06f13bcb8e9b5c" alt="太阳1.jpg"></p><p>《流浪地球》中的情景设定太阳膨胀吞噬地球，这一点是有科学道理的。</p><p>太阳发出光和热，因为它的内部不断在发生核聚变，和人类在地球上研究出来的氢弹爆炸是同一个原理。所以，你可以想象，地球上每时每刻能接收到来自太阳的光线和热量，意味着太阳里每时每刻都有上亿万颗氢弹同时发生着爆炸。</p><p>爆炸除了产生光和热，同时产生很多有害的核辐射（科学上把这些带电粒子流叫 <strong>太阳风</strong>），为什么地球上的生命能够安然无恙？</p><p><strong>因为地球自身同时具有整个太阳系星体中独一无二的两大保护伞。</strong></p><p>  1.地球磁场。</p><p><img src="https://image.tracup.com/78e6f3344be3474724f1d325d393cb46" alt="地球磁场.jpg" title="地球磁场有效的阻止了太阳风"></p><blockquote><p>地球上的磁场大致和地球南北极的方向一致，我国古代的人民不明白其中的科学道理，但发现了一些现象并加以利用。比如宋朝时已经普遍利用地表磁石制作指南针，用于大海航行指明方向。</p></blockquote><p>  2.大气层。</p><p>  <img src="https://image.tracup.com/4c76b21e80e77b59de8aa5266f65b34d" alt="大气层.jpg" title="美丽的大气层"></p><p>  绝大部分空气紧密围绕在距离地球平均 10 几公里左右（南北略薄、赤道厚）的地表上空，空气流动非常频繁，时常有雨雪、雷电、冰雹、台风等各种气象现象，被称作 <strong>对流层</strong>。</p><p>  对流层吸收太阳的长波辐射，使地表保持适宜的温热，往上每升高 1 公里，温度会下降 6.5 摄氏度。</p><p>  在对流层的上面，距离地表 10-50 公里的空气称作 <strong>平流层/同温层</strong>。</p><p>  在平流层的中，空气中的氧气在太阳的紫外线的照射下会自动电离形成 <strong>臭氧层</strong>，它像一道屏障保护着地球上的生物免受太阳高强度紫外线及高能粒子的直接照射。</p><blockquote><p>然而，这层生命屏障却已经被人类活动破坏的不那么坚固了。</p></blockquote><p>  <img src="https://image.tracup.com/86adf31ad2365a045f426e89a40c7fbe" alt="sun2.jpg" title="太阳"></p><p>科学家根据组成太阳的各种元素（主要是氢和氦，氢弹的组成成分）的总量，推算出这种核聚变爆炸反应可以持续 100 亿年，也就是说<a href="https://baike.so.com/doc/2160849-2286445.html" target="_blank" rel="noopener">太阳的寿命是 100 亿年</a>。</p><h4 id="目前太阳大约-45-7-亿年，寿命已经度过了近一半。在大约-50-至-60-亿年之后，太阳内部的氢元素几乎会全部消耗尽，随后太阳开始消耗氦元素继续核聚变反应，温度将更高，因此太阳的外层将膨胀，并一步步蔓延到目前-地球-或-火星-运行的位置。"><a href="#目前太阳大约-45-7-亿年，寿命已经度过了近一半。在大约-50-至-60-亿年之后，太阳内部的氢元素几乎会全部消耗尽，随后太阳开始消耗氦元素继续核聚变反应，温度将更高，因此太阳的外层将膨胀，并一步步蔓延到目前-地球-或-火星-运行的位置。" class="headerlink" title="目前太阳大约 45.7 亿年，寿命已经度过了近一半。在大约 50 至 60 亿年之后，太阳内部的氢元素几乎会全部消耗尽，随后太阳开始消耗氦元素继续核聚变反应，温度将更高，因此太阳的外层将膨胀，并一步步蔓延到目前 地球 或 火星 运行的位置。"></a>目前太阳大约 45.7 亿年，寿命已经度过了近一半。在大约 50 至 60 亿年之后，太阳内部的氢元素几乎会全部消耗尽，随后太阳开始消耗氦元素继续核聚变反应，温度将更高，因此太阳的外层将膨胀，并一步步蔓延到目前 地球 或 火星 运行的位置。</h4><p><strong>因此，避开太阳的灾难给人类的时间还有至少 50 亿年之久，而人类的诞生不过数万年，算上猿猴类的进化历史距今<a href="https://baike.baidu.com/item/%E4%BA%BA%E7%B1%BB%E8%BF%9B%E5%8C%96%E5%8F%B2/282480" target="_blank" rel="noopener">不过 6500 万年</a>。</strong></p><p>不过，人类并不打算坐以待毙，孙子兵法里说：知彼知己者，百战不殆。</p><p>我们还需要对太阳了解的更多，研究的更深入一些。</p><blockquote><p>早在 1974 年，美国就发射了太阳神 1 号（美国和西德联合研制），在接近太阳 4650 万公里的地方，观测了太阳表面及其周围空间发生的各种现象。</p></blockquote><blockquote><p>一年后的 1975 年，美国又发射了太阳神 2 号，比 1 号离太阳近了 300 万公里，距离太阳 4345 万公里，成为有史以来距离太阳最近的人造物体，更创造了迄今人造太空物体最快飞行记录：25 万公里/小时（70公里/秒）。直到 1985 年它们还在朝地球传输数据。当前太阳神号探测器已经不再工作了，但仍停留在绕太阳运行的椭圆轨道中。</p></blockquote><p><img src="https://image.tracup.com/182fdc919bc8e5eb2bc04820c1d0358b" alt="帕克.jpg" title="帕克号太阳探测器"></p><p>2018 年 8 月 12 日，美国发射了“帕克号”太阳探测器。</p><blockquote><p>这个耗资 15 亿美元的研发的宝贝，将是人类在历史上首次进入到太阳大气层（日冕）的探测器。它将围绕太阳飞行 7 年，在距离太阳最近 616 万公里的轨道上，顶住 100 多万摄氏度的高温（日冕温度高，能量密度低），自身被加热到 1400 摄氏度的环境下长期工作。并将打破人类最快飞行器的记录，达到 70 万公里/小时的飞行速度。</p></blockquote><p>人类对太阳的探测活动见下表：</p><p><img src="https://image.tracup.com/plugin_0f1896765e23882429da39b5507486dd.png" alt="snapshot_20190210094858.png"></p><h4 id="另一方面，距离太阳系最近的系外恒星就是《流浪地球》中的目标星体：比邻星。"><a href="#另一方面，距离太阳系最近的系外恒星就是《流浪地球》中的目标星体：比邻星。" class="headerlink" title="另一方面，距离太阳系最近的系外恒星就是《流浪地球》中的目标星体：比邻星。"></a>另一方面，距离太阳系最近的系外恒星就是《流浪地球》中的目标星体：比邻星。</h4><p>距离地球 4.2 光年，也就是从地球出发，用光的速度（30 万公里/秒）也需要跑 4.2 年，往返一次需要近 10 年。目前，我们的技术还无法突破光速极限，更不要说载人飞行了。</p><ul><li>当前，人类跑得最远的飞行器，是美国在 1977 年 9 月 5 日发射的”旅行者1号”探测器。截至 2018 年 1 月 2 日止，旅行者 1 号正处于离太阳 211 亿公里的距离。</li></ul><blockquote><p>美国在 70 年代同时研制了旅行者 1 号和旅行者 2 号两个一模一样的探测器，用于飞往太阳系外进行空间探测。上面分别搭载了三个核动力电池作为动力，可以支撑它们一直工作到 2025 年。</p><p>美国先于 1977 年 8 月 20 日发射了 2 号，让它先飞往 <strong>土星</strong>，接着探测 <strong>天王星</strong> 和 <strong>海王星</strong>，最后飞离太阳系（时间是 2018 年 12 月 10 日，足足飞了 41 年才探测不到太阳风）。</p><p>旅行者 1 号发射晚了半个月，飞得却快一点。它首先于 1979 年飞临 <strong>木星</strong>，一年后又到达 <strong>土星</strong>，并拍回了一万多张 <strong>彩色照片</strong>。随后，它一头扎向了银河系的中心，再也不回来了。</p></blockquote><ul><li>对于太阳系外的探测，人类目前能看到最远的地方是在 2016 年 3 月 4 日，由距离地表 540 公里高度的 <strong>“哈勃望远镜”</strong> 成功捕捉到了距离地球达134亿光年的 GN-z11 星系发出的微光。</li></ul><p><img src="https://image.tracup.com/20b87931c53e2c7c90a90d1d37320f1e" alt="哈勃望远镜.jpg" title="哈勃望远镜"></p><blockquote><p>1990 年 4 月 25 日，由美国航天飞机送上太空轨道的 “哈勃”望远镜长 13.3 米，直径 4.3 米，重 11.6 吨，造价近 30亿 美元。它以 2.8 万公里的时速沿太空轨道运行，清晰度是地面天文望远镜的 10 倍以上。同时，由于没有大气湍流的干扰，它所获得的图像和光谱具有极高的稳定性和可重复性。</p></blockquote><p><img src="https://image.tracup.com/8073274d5981ac3ff36602f2c40ba517" alt="恒星塌陷.jpg" title="哈勃望远镜拍摄的距离地球1亿多光年的恒星塌陷，外层不断膨胀，来自于垂死恒星的紫外线使被喷射出的物质发光。50亿年后的太阳的结局和这个恒星一样。"></p><p>而最新的耗资将达 <strong>上百亿美元</strong> 的 <strong>“詹姆斯·韦伯太空望远镜”</strong> 正在紧锣密鼓的测试中，它的口径是 <strong>哈勃望远镜</strong> 的 <strong>3倍</strong>，重量却只有哈勃望远镜的一半。</p><blockquote><p>美国计划把它送到距离地球 150 万公里的第二拉格朗日点，这里是太阳和地球的引力平衡点，望远镜可以消耗最少的燃料保持在轨运行。</p><p>从 1996 年立项至今已经过去了 23 年，詹姆斯·韦伯太空望远镜预算不断提高，发射时间不断被推迟，目前最新的发射窗口预计是 2021 年 3 月 30 日发射。</p><p>主要原因是美国的航天飞机因为安全问题提前退役了，之前的哈勃望远镜（离地面 500 公里左右）的维护和更新，都是用航天飞机搭建宇航员上去手动操作的。</p><p>而詹姆斯·韦伯太空望远镜距离地面足足有 150 万公里。它实在太远了，出现意外状况不可能从地面安排人坐飞船去维修。同时出于保证光学图像的精度等考虑，它将在零下 273.15 摄氏度的环境中长期运行，一旦出现故障，损失将是空前的。</p><p>因此，科学家们需要想出各种意想不到的状况，并设法实现望远镜自动修复自动校正的智能化功能。</p><p><strong>它将是人类有史以来最昂贵、最复杂、最精密、最智能的望远镜。</strong></p></blockquote><p>综上所述，以现有的技术手段移民到太阳系之外，准备工作还非常的不充足。</p><h3 id="选择二：移民到太阳系中的其他行星上面。"><a href="#选择二：移民到太阳系中的其他行星上面。" class="headerlink" title="选择二：移民到太阳系中的其他行星上面。"></a>选择二：移民到太阳系中的其他行星上面。</h3><p>为什么要选择行星？</p><p>所有自身能发光的天体叫 <strong>恒星</strong>。</p><blockquote><p>比如 <strong>太阳</strong>。整个太阳系只有太阳（Sun）这一个恒星。</p></blockquote><p>所有自身不发光，围绕 <strong>恒星</strong> 运动的天体叫 <strong>行星</strong>。</p><blockquote><p>太阳系一共有八大行星，分别是 <strong>水星</strong>（Mercury）、<strong>金星</strong>（Venus）、<strong>地球</strong>（Earth）、<strong>火星</strong>（Mars）、<strong>木星</strong>（Jupiter）、<strong>土星</strong>（Saturn）、<strong>天王星</strong>（Uranus）、<strong>海王星</strong>（Neptune）。</p></blockquote><p>所有围绕 <strong>行星</strong> 运动的天体叫 <strong>卫星</strong>。</p><blockquote><p>比如，围绕地球运动的唯一天然星体 <strong>月球</strong> 就是卫星。</p><p>人类发射的围绕地球运动的物体就是 <strong>人造地球卫星</strong>。</p></blockquote><p>因为地球是行星，所以人类进行星际移民，也需要选择一个在体积、质量、环境等方面和地球相仿的行星是最合适的。</p><p>先上图：</p><p><img src="https://image.tracup.com/10bacff32861f1c5a8a76aaf8adf1340" alt="太阳系.png" title="完整的太阳系简图"></p><p>从左到右依次为：</p><p>太阳(Sun)-水星(Mercury)-金星(Venus)-地球(Earth)-火星(Mars)-小行星带(Asteroid Belt)-木星(Jupiter)-土星(Saturn)-天王星(Uranus)-海王星(Neptune)-伊伯特带（冥王星所在的位置Kuipter Belt Objects）。</p><h4 id="分水岭：小行星带-Asteroid-Belt"><a href="#分水岭：小行星带-Asteroid-Belt" class="headerlink" title="分水岭：小行星带 ( Asteroid Belt )"></a>分水岭：小行星带 ( Asteroid Belt )</h4><p>小行星带( Asteroid Belt )是介于火星和木星轨道之间的小行星密集区域，估计有多达 50 万颗小行星，目前已经被人类编上号码的有 12 万多颗。</p><blockquote><p>小行星是唯一可以由发现者拥有命名权并获得公认的天体。</p><p>新的小行星被发现后，上报国际小行星协会，一旦得到确认从来未被前人发现过，发现者就享有命名权。它的名字由两部分组成，前半部分是由国际机构按顺序编码，后半部分就由发现者自己说了算。</p><p>2009 年 3 月 20 日，海峡两岸的四个天文爱好者合作发现了一颗新的小行星，上报经确认后无误获得了编号。由于这四个发现者都是 <strong>周杰伦</strong> 的铁杆粉丝，一致决定以 <strong>周杰伦</strong> 的名字命名这个小行星，命名提案经国际天文联合会小天体命名委员会通过，于 2011 年 6 月小行星中心公报第 75354 号中宣布了这一命名决定。</p><p>周杰伦听说后刚开始不相信，以为歌迷和他开玩笑，最后知道是真的，非常感动，为此还写了一首歌《爱的飞行日记》。</p></blockquote><p><img src="https://image.tracup.com/plugin_fbce1a2a96ff4f220b49faa336a9e27a.png" alt="snapshot_20190210092851.png" title="目前以中文名字命名的小行星"></p><p><strong>为什么说小行星带是分水岭呢？</strong></p><h4 id="以小行星带为界限，往外层的区域叫-外太阳系。"><a href="#以小行星带为界限，往外层的区域叫-外太阳系。" class="headerlink" title="以小行星带为界限，往外层的区域叫 外太阳系。"></a>以小行星带为界限，往外层的区域叫 外太阳系。</h4><p><img src="https://image.tracup.com/4de79f6fe31a42287b38c38cd36c32d7" alt="1.jpg" title="体积对比图"></p><p>外太阳系内有四个大行星，分别是 木星、土星、天王星、海王星。</p><p>这四大行星全是都是 <strong>气体星球</strong> 。</p><p>以木星最大，它们的质量和体积要占到整个太阳系的绝大部分，然而密度却很小，这四个行星通常也叫 <strong>类木行星</strong>。</p><p>它们没有坚硬的固体表面，因此根本 <strong>无法登陆</strong>。</p><h4 id="小行星带的往太阳的方向的区域叫-内太阳系。"><a href="#小行星带的往太阳的方向的区域叫-内太阳系。" class="headerlink" title="小行星带的往太阳的方向的区域叫 内太阳系。"></a>小行星带的往太阳的方向的区域叫 内太阳系。</h4><p>内太阳系中也有四个大行星，分别是 水星、金星、地球、火星。</p><p>这四个星球中地球最大，也是唯一一个存在生命的星球。</p><p>它们都有岩石或土壤成分构成的坚固表面，都是再生大气层（尽管成分各不相同），密度也十分接近，也叫 <strong>类地行星</strong>。</p><h4 id="那么，这四个行星，哪一个适合人类移民呢？"><a href="#那么，这四个行星，哪一个适合人类移民呢？" class="headerlink" title="那么，这四个行星，哪一个适合人类移民呢？"></a>那么，这四个行星，哪一个适合人类移民呢？</h4><h4 id="先看-水星。"><a href="#先看-水星。" class="headerlink" title="先看 水星。"></a>先看 <strong>水星</strong>。</h4><p><img src="https://image.tracup.com/1cab9d22dce5f6ac169e7928aae9f92d" alt="水星.jpg" title="水星照片"></p><p>这是距离太阳最近的行星，也是太阳系最小的一个行星。</p><p>人类目前为止只有两个探测器到达过水星，分别是美国在 1973 年 11 月 3 日发射的”水手10号”和 2004 年 8 月 3 日发射的”信使号”探测器。</p><p>观测和研究表明，水星的大气极为稀薄，所以造成 <strong>昼夜温差</strong> 是类地行星中最大的。</p><p>白天太阳光直射处温度高达 427℃，夜晚太阳照不到时，温度降低到 -173℃。</p><p>水星每天高达 600℃的温差，而地球大部分情况下每天的温差（这里只是太阳辐射能量，抛开季节因素）一般不会超过 10℃。</p><h4 id="再看-金星。"><a href="#再看-金星。" class="headerlink" title="再看 金星。"></a>再看 <strong>金星</strong>。</h4><p><img src="https://image.tracup.com/784d9ce105057d7d53294236a163d8dd" alt="金星.jpg" title="迄今最清晰的金星照片，2015年由欧洲宇航局与俄罗斯合作的 金星快车探测器 拍摄"></p><p>金星是太阳系中距离地球最近的两个行星之一，另一个是火星。</p><p>尽管金星离太阳更远，然而其地表温度却高达 500℃，甚至比水星还要热。</p><p>这是因为金星大气的最主要成分是二氧化碳，导致金星的 <strong>温室效应</strong> 是类地行星中最大的。而且金星的 <strong>大气压强</strong> 也非常高，大约为地球的 90 倍，相当于地球深海中 1000 米深处的水压。</p><p>金星经常会降落巨大的具有腐蚀性的酸雨，它的天空是橙黄色的。</p><p>金星上也有雷电，曾经记录到的最大一次闪电持续了 15 分钟。</p><blockquote><p>以上这些研究和探测，<strong>前苏联</strong> 取得了辉煌的成就。</p><p>前苏联是人类研究和探测金星最早最深入的国家。</p><p>从 1961 年开始，截至 1985 年，苏联一共向金星发射了 18 个探测器，其中仅仅失败了三次。</p><p>1970 年，前苏联的”金星 7 号”首次实现在金星表面的软着陆，成功测量了金星表面的温度和大气压强。</p><p>1981 年 10 月 30 日和 11 月 4 日先后上天的 “金星 13 号” 和 “金星 14 号” ，其着陆舱携带的自动钻探装置深入到金星地表，采集了岩石标本。</p><p>其中 13 号的着陆区的温度是457℃，14 号着陆区的压强相当于地球海洋 900 米深处所具有的压力。</p><p>前苏联把战胜金星表面高温高压的特殊工艺应用到军事领域，成功打造出全世界最恐怖的深海核潜艇力量。在 70 年代创造出的军用核潜艇极限下潜深度记录至今无人打破。</p></blockquote><p><img src="https://image.tracup.com/5c4304fbb7757e6efcabdef4b0338823" alt="台风.jpeg" title="前苏联制造的全世界最大的台风级战略导弹核潜艇（左）和攻击核潜艇（右）"></p><blockquote><p>台风级核潜艇的水下排水量达到了惊人的 4.8 万吨，堪比一艘中型航母。每艘共有 20 个洲际导弹发射筒，每个发射筒内的核导弹可以装载 10 枚分导弹头，通过 10 次齐射可以将艇内 200 枚核弹头全部打光。</p><p>前苏联共建成 6 艘台风级编为一个支队。战争状态下，这个台风编队可以在北极冰盖下 50 米的水深处发射出 1200 枚核弹头，基本可以毁灭全世界任何一个大国。</p></blockquote><p><img src="https://image.tracup.com/2e769aea757b8a717e957592d1537bf0" alt="金星表面.jpg" title="金星表面"></p><blockquote><p>在苏联在金星探测上面取得的成绩极大的刺激了美国。</p><p>当时，美国的全部精力聚焦在载人登陆月球的项目上。被迫从团队中分出一小部分精力研究金星，仓促组织的两次金星探测均以失败告终。</p><p>从 78 年开始，美国对金星探测才发力。直到 90 年代，苏联解体前夕，美国腾出手来对金星发射了一颗迄今最先进的金星探测器：麦哲伦号。对前苏联在 70 年代的研究成果进行了进一步验证。而且有了更多的全新发现。</p><p>2015年，欧洲宇航局与俄罗斯合作的”金星快车”探测器则拍摄了迄今最清晰的金星照片，并重点研究了金星上的温室效应，期望对地球日益严重的温室效应有所帮助。</p></blockquote><p>截至目前，人类向金星发射或路过的探测器已经超过了 40 个。</p><p><img src="https://image.tracup.com/9d72f460826e3a69f16cf180aaa2ba6a" alt="金星和地球.jpg" title="金星和地球"></p><h4 id="在-2018-年下旬，美国国家航天局-NASA-正在讨论移民金星的可能性。"><a href="#在-2018-年下旬，美国国家航天局-NASA-正在讨论移民金星的可能性。" class="headerlink" title="在 2018 年下旬，美国国家航天局 NASA 正在讨论移民金星的可能性。"></a>在 2018 年下旬，美国国家航天局 NASA 正在讨论<a href="https://theconversation.com/nasa-wants-to-send-humans-to-venus-heres-why-thats-a-brilliant-idea-104961" target="_blank" rel="noopener">移民金星的可能性</a>。</h4><p>NASA 讨论的并不是地面移民，而是派出一艘飞艇，飞行在金星地面上方 50 公里~ 60 公里的高空中，人类就生活在飞艇里面。那个区域的大气压相当于地球海平面大气压的一倍，跟住在西藏那曲地区差不多，温度介于 20°C 和  30°C之间。人类在那里甚至不需要宇航服与外界隔离，只需要携带氧气装置，因为那里的空气绝大部分是二氧化碳。</p><p>高于此高度的大气层也足够密集，可以保护人员免受来自太空的电离辐射。太阳辐射提供了比地球更大的能量，可用于发电（是地球太阳能发电效率的大约 1.4 倍）。</p><p>飞艇漂浮在空中，使用正常的地球空气填充就可获得浮力，因为氧气和氮气的比重低于二氧化碳，所以飞艇可以飞起来。目前的技术完全可以实现这个方案。</p><p>目前去一趟金星需要三个半月的时间。</p><h4 id="再看最后一个-火星。"><a href="#再看最后一个-火星。" class="headerlink" title="再看最后一个 火星。"></a>再看最后一个 <strong>火星</strong>。</h4><p><img src="https://image.tracup.com/d425350a8c05aee46ebe9edf0d63f998" alt="mars-planet.jpg"></p><p>火星的大小只有地球的一半，重量只有地球的十分之一，表面积和地球的陆地面积差不多（因为地球的大部分区域是海洋）。</p><p>火星上也有四季，火星上的一年（绕太阳转一圈）大约等于地球上的两年，而火星上的一天（火星自传一圈）也是 24 小时。</p><p>火星上的大气非常稀薄，空气成分和地球类似，但二氧化碳的含量占绝大部分。因为稀薄的二氧化碳无法形成温室效应，所以火星上很冷。平均温度是零下 55°C，和地球上的南北级差不多。</p><p>之所以看到火星是赤红的，因为它的表面富含氧化铁，并不是它的温度高造成的。</p><p>因为火星有四季，在夏季最热的时候，火星地面的最高温度是 27°C，甚至比地球的夏季更适宜。</p><p>火星的南北级也和地球一样有大量冰盖，而且随着季节的变化消长。不同的是，火星上是干冰（固态二氧化碳），地球上是水冰。</p><p>火星和地球环境如此的相似，不过火星是一颗 <strong>沙漠行星</strong>，表面沙丘、砾石遍布，没有稳定的液态水体。</p><p>下面这个网址提供美国的好奇号火星车拍摄的多张火星全景照片，各种不同的地貌，可以360度旋转观看。</p><p><a href="https://www.360cities.net/sets/curiosity-mars" target="_blank" rel="noopener">火星全景照片</a></p><p><img src="https://image.tracup.com/541194240baac9dc42637d06fe1f0f97" alt="Img324540662.jpg" title="火星表面"></p><blockquote><p>从 1960 年，前苏联发射第一个火星探测器开始（失败），人类始终对火星探索保持极大的热情。因为和其他行星比起来，它跟地球实在太像了。</p><p>截至目前，人类一共发射了至少 44 个火星探测器，完全成功的只有 18 次，其中美国成功 17 次，印度成功 1 次；取得部分成功 3 次，其中前苏联 2 次，欧洲航空局 1 次。</p><p>与前苏联（俄罗斯）在金星探测的辉煌成就形成鲜明对比的是，在探测火星方面，完全一败涂地。20 次发射中，18 次完全失败，仅有 2 次到达火星轨道，但是随行的登陆器则完全失效，仅仅取得部分成功。</p></blockquote><blockquote><p>亚洲有三个国家都展开了对火星的探测，分别是中国、日本和印度。其中 <strong>中国</strong> 和 <strong>日本</strong> 均以失败告终（2011 年中国的火星探测器使用的是俄罗斯的火箭），受此影响，中国表示短期内不会继续开展火星项目。</p><p>反而是 <strong>印度</strong> 在 2014 年成功把自主研制的 <strong>“曼加里安”号火星探测器</strong> 送入了火星轨道，成为亚洲第一个，全球第四个成功探测火星的国家或组织。</p><p>印度此次成功还打破了另一个世界记录，即第一次尝试就成功到达火星轨道。美国没有做到，前苏联（俄罗斯）没有做到，欧洲也没有做到。</p><p>同时印度火星探测计划的筹备时间只有15个月，7300 万美元（约合4.5亿元人民币)的预算也极低，甚至还不如当年美国科幻电影《地心引力》的预算高（1.5亿美元），却取得了如此巨大的成功。</p></blockquote><p>人类探测火星最深入最成功的国家是 <strong>美国</strong>，不仅把探测器送到火星轨道，还成功的把登陆器和火星车送到了火星的地表正常工作。</p><p>截至今日，整个地球仍然只有 <strong>美国</strong> 具备把无人载具登陆到火星表面执行任务的能力。</p><p>尤其是进入 2000 年以后，美国对火星的研究步伐明显加快，7 次行动全部取得巨大成功。2 个在轨飞行的探测器，2 个固定式着陆器，3 个移动式火星车，展开全方位多角度的勘察。</p><p><strong>研究成果确实振奋人心。</strong></p><p><img src="https://image.tracup.com/7baadc37935d87fd9625bfd660b95e4c" alt="rIK1568SkMB6tALN3heW4w%3D%3D%2F7917019182150961517.jpg" title="2013 年专门用于研究火星大气与挥发演化的轨道飞行器 MAVEN"></p><p><img src="https://image.tracup.com/811b64f1f87b737a2dc71fb82bcaff01" alt="113662990.jpg" title="2006 年关注火星天气变化，寻找水存在的迹象的轨道飞行器 MRO"></p><p>MRO 从高空发现火星北极冰盖下有大量冰块，并用摄像机拍摄到大量雪崩的照片。</p><p>同时在火星温暖的季节里，侦测到火星表面似乎有流动的液态水。</p><p><img src="https://image.tracup.com/b270c8c069d627f16275d0d1ff2774cb" alt="勇气号.jpg" title="2003 年勇气号和机遇号火星车取样研究了火星平原的土壤和岩石成分"></p><p>勇气号首次在火星的岩石上钻了一个洞，并检测了火星石的所有化学成分，和地球很接近；</p><p>机遇号则检测了火星的黏土，这种黏土成分在地球上同样存在，而且有助于形成水。</p><p><img src="https://image.tracup.com/dcf5bbfe15032f9958ca319259bf61bc" alt="凤凰号.jpg" title="2007 年凤凰号固定式着陆器钻孔研究了火星北极是否存在地下水和有机物"></p><p>凤凰号则首次检测到火星可以下雪，并从火星北极的着陆点附近挖到了冰冻水。</p><p>不过，火星上水的沸点很低，只有 4℃，水在很低的温度下就会迅速蒸发。</p><p><img src="https://image.tracup.com/964303c73022670f6f1d62fcee308a93" alt="好奇号.jpg" title="2011 年好奇号火星车，人类史上最贵的车，单车造价 26 亿美元"></p><p><img src="https://image.tracup.com/a107746d9596d6f3e6e5125e2c687058" alt="好奇.jpg" title="世界上第一辆采用核动力驱动的火星车，其使命是探寻火星上的生命元素"></p><p>好奇号发现了火星的古河床，并将其登陆火星后获得的第一铲细粒土壤加热到835摄氏度的高温，结果分解出水、二氧化碳以及含硫化合物等物质，其中水的质量约占2%。</p><p>这意味着今后如果有人登上火星，只需在火星表面铲起土壤，然后稍稍加热，就可获得水。</p><p><img src="https://image.tracup.com/6dc64c8dae5ed127f509e9d2a6ffe7ae" alt="洞察号.jpg" title="2018 年洞察号固定式探测器着陆"></p><p>洞察号将在火星表面安装一个火震仪，并使用钻头在火星上钻出迄今最深的孔洞进行火星内部的热状态考察。</p><p><img src="https://image.tracup.com/1921d5dd018dd97bbd559546bc544078" alt="冰.jpg" title="2018 年 12 月 20 日，欧洲航天局的火星快车轨道飞行器发回了一张照片，显示了常年寒冷的 Korolev 火山口。"></p><p>科学家认为白色的部分是冷冻的二氧化碳，下面就是冰。这意味着，火星上不仅有液态水，还有湖。</p><p>火星快车是2003年6月2日发射的，六个月后到达火星，已经在火星轨道上运行了15年。</p><p>水是生命之源，解决了这个大问题。移民火星就不是异想天开的幻想。</p><p>好消息一个个接踵而至。</p><p>现在，美国最牛的，也是全世界最牛的私人航天公司 <strong>SpaceX</strong> 的总裁 <strong>埃隆·马斯克（Elon Musk）</strong>就直言不讳的告诉媒体，他这一生的目标就是能死在火星上。</p><p><img src="https://image.tracup.com/e811003ec35789aee73841252d097fbe" alt="muskelon_spacex_122217getty.jpg!720.jpg"></p><p>这个梦想也是他创建 <strong>SpaceX</strong> 太空探索技术公司的初衷！</p><p>在他的领导下，SpaceX 成功研制了人类历史上第一种能重复使用的火箭，在多次圆满完成发射任务的情况下，将火箭发射成本大幅下降，发射频率和安全可靠性均得到大幅提高。这些世界级的指标，目前拥有绝对的压倒性竞争力。</p><p>美国国家航天局包括军方已经把近地轨道的发射任务和未来几年向国际空间站运送宇航员的任务全部交给了 SpaceX。</p><p>关于他的故事，我有时间会专门写文章介绍。</p><p>他计划在2022年向火星发射两枚火箭，为未来任务提供补给。2024年，再发送四枚火箭，其中两枚将第一批人类运送到火星以建立一个前哨站。</p><p><img src="https://image.tracup.com/b7850a1c00bfbf17c0e064154f7f5ea0" alt="bfr.jpg"></p><p>前往火星是对宇航员心理的巨大考验。前往火星的旅程将持续几个月，这期间，宇航员被限制在一个不超过中型房车的空间里面。即使到达火星，与地球之间的通信将有长达45分钟的延迟，你说一句话，要等45分钟才能听到答复。</p><p>SpaceX 公司设计当中的载人飞船 Big Falcon Rocket（简称 BFR），安排了40个舱室，可容纳200人以上的乘客，每个舱室可以容纳五六个人。正常情况下，每次前往火星大约是100人，每个舱室住两到三个人。此外，还有公共区域供乘客使用，用于娱乐和社交。根据 SpaceX 公司的规划，计划在2024年首飞。</p><p><img src="https://image.tracup.com/c8b1feaf0248bc5f2a6825912a42e200" alt="a-mars-city.png" title="马斯克未来在火星建造的基地"></p><p><img src="https://image.tracup.com/3ec6f3d21d559d9162bf48dcad12e5f2" alt="musks-bfr-slide-in-its-whole.jpeg" title="前往火星的BFR火箭"></p><p><img src="https://image.tracup.com/5aee1f9a1f55b49045174edf16a75995" alt="the-bfr.png" title="马斯克设计的火星基地"></p><p>更多详情可以点击下面的链接：</p><p><a href="https://www.inverse.com/article/48612-spacex-engineer-details-ambitious-plan-to-build-multiple-cities-on-mars" target="_blank" rel="noopener">火星基地</a></p><h4 id="更多的计划"><a href="#更多的计划" class="headerlink" title="更多的计划"></a>更多的计划</h4><p>2004年美国总统布什宣布载人火星任务为太空探索展望中的长期目标。</p><p>欧洲航天局希望于2030至2035年间送人类上火星。而在这之前有其他探测任务，包括ExoMars和火星样本取回任务。</p><p>种种迹象表明：</p><p>人类移民火星的这一天已经不远了。</p>]]></content>
    
    <summary type="html">
    
      讲科学而不幻想，用事实和数据说话，写一篇大家都能看懂的科普文章。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感悟" scheme="https://tk208.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>《流浪地球》影评</title>
    <link href="https://tk208.github.io/%E3%80%8A%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%83%E3%80%8B%E5%BD%B1%E8%AF%84/"/>
    <id>https://tk208.github.io/《流浪地球》影评/</id>
    <published>2019-02-08T08:48:39.000Z</published>
    <updated>2019-03-31T05:40:59.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>今天看了号称中国首部科幻巨制《流浪地球》，说实话很失望。</p><p>除了电脑特效之外，太多的硬伤和槽点。</p><h1 id="说说槽点"><a href="#说说槽点" class="headerlink" title="说说槽点"></a>说说槽点</h1><hr><p>这部电影是根据中国一个科幻作家 <strong>刘慈欣</strong> 的小说改编的。我没有看过刘慈欣的小说，电影中描述的是若干年后，太阳极速膨胀即将吞噬地球，地球表面却进入了冰封期，地表温度是 -85℃，千里冰封，万里雪飘。</p><p>人类组建了一个 <strong>联合政府</strong> ，同时在地球上建立了一万多个行星发动机，利用 <strong>木星</strong> 的引力，驱动地球远离太阳系现有的运行轨道，驶往其他星系。</p><p>因为地表极寒，联合政府在一万多个行星发动机下面都建了地下城，全人类都居住下 <strong>地下城</strong> 中。</p><p>同时，在外太空中组建了一个巨大的人工智能控制的 <strong>国际空间站</strong> ，用于协调支援地球的逃逸行动。</p><ol><li>影片在空间站的一个切换镜头中，亮出了目前的联合国五大常任理事国（美、中、俄、英、法）的国旗，暗示了联合政府的身份，同时影片中所有人员服装的臂章都是两个旗帜。分别是联合政府的旗帜和国籍国旗。</li></ol><p><img src="https://image.tracup.com/97dc473b29aa9ca11475eeaca5dca885" alt="timg.jpg"></p><ul><li><p>然而，整个国际空间站却只有中俄两国的宇航员的对话，完全无视其他国家。</p></li><li><p>一个集合全人类智慧制造出来的国际空间站轻易就出现了”叛逃”行为，而且竟然没有纠错机制，只能依靠个人英雄主义通过破坏规则来纠错。然后吴京扮演的中国宇航员刘培强一个人挺身而出拯救地球拯救全人类。</p></li><li><p>刘培强作为中国宇航员没有权限干预国际空间站的运行。通过语音频道和联合政府建立了通话，三言两语就让联合政府首脑（讲俄语的全球领袖）同意其驾驶空间站撞击木星，通过自毁方式制造爆炸冲击波来改变地球的引力轨道。</p><pre><code>大哥，空间站里还有其他国家那么多宇航员呢！你征得人家同意了吗就撞击木星？还有，凭什么未来联合政府的首脑就一定是俄罗斯人？</code></pre></li><li><p>刘培强通话完毕后，拿起一瓶高烈度的酒精瓶子直接砸向了人工智能化的控制台，顿时燃起了熊熊大火。巨大的火焰和爆炸之中，刘培强从容的跳进了旁边的舱室，安全的驾驶着空间站撞向了木星。</p><pre><code>编剧，您能有点常识吗？遵守安全手册和操作规范是最基本的职业素养，更何况空间站的宇航员。一言不合就搞破坏，还以为自己很帅。身边大火熊熊，爆炸四起，自己还能安全的开飞船，您是在侮辱人民群众的智商吗？这和抗日神剧有什么区别？</code></pre></li></ul><h3 id="最让人不寒而栗的！"><a href="#最让人不寒而栗的！" class="headerlink" title="最让人不寒而栗的！"></a>最让人不寒而栗的！</h3><h4 id="这一段似乎在提示人们，规则和制度是有害的。"><a href="#这一段似乎在提示人们，规则和制度是有害的。" class="headerlink" title="这一段似乎在提示人们，规则和制度是有害的。"></a>这一段似乎在提示人们，规则和制度是有害的。</h4><h4 id="要敢于挑战规则，破坏制度。用规则之外的方式实现自己的目标是一种英雄行为。"><a href="#要敢于挑战规则，破坏制度。用规则之外的方式实现自己的目标是一种英雄行为。" class="headerlink" title="要敢于挑战规则，破坏制度。用规则之外的方式实现自己的目标是一种英雄行为。"></a>要敢于挑战规则，破坏制度。用规则之外的方式实现自己的目标是一种英雄行为。</h4><h4 id="2018年，从瑞典驱逐中国游客事件，到中兴通讯被制裁，中美贸易战，再到孟晚舟事件，我们为什么总是吃亏？"><a href="#2018年，从瑞典驱逐中国游客事件，到中兴通讯被制裁，中美贸易战，再到孟晚舟事件，我们为什么总是吃亏？" class="headerlink" title="2018年，从瑞典驱逐中国游客事件，到中兴通讯被制裁，中美贸易战，再到孟晚舟事件，我们为什么总是吃亏？"></a>2018年，从瑞典驱逐中国游客事件，到中兴通讯被制裁，中美贸易战，再到孟晚舟事件，我们为什么总是吃亏？</h4><h4 id="规则啊！！！点到为止，各位自行去补课。"><a href="#规则啊！！！点到为止，各位自行去补课。" class="headerlink" title="规则啊！！！点到为止，各位自行去补课。"></a>规则啊！！！点到为止，各位自行去补课。</h4><ol start="2"><li>地球上的发动机启动和运转需要一种叫做”火石”的燃料。</li></ol><ul><li><p>影片中”火石”这种全球性紧缺战略资源，却需要征用民间运输车辆通过陆路运输到指定地点。</p></li><li><p>镜头开始时，明明展示了中国制作的庞大飞机，运输过程中也有飞机从头掠过，政府却征用民间运输车走陆路，编剧你能解释一下合理性不？</p></li><li><p>影片中只有中国人在全力抢救地球，全世界的其他国家人民集体陷入绝望和等死。</p></li></ul><ol start="3"><li><p>在未来世纪，高度自动化智能化的时代，一个高级运输车的驾驶技能的培训竟然需要五年！而且还非常的难开！</p><pre><code>能不能有点科学常识？自动化的目标就是减少人工介入，机器能做好的都交给机器。</code></pre></li><li><p>影响全人类命运的行星发动机，竟然轻而易举就能被一个中国年轻的程序员植入病毒程序，从而改变喷射的能量高度。</p></li></ol><p>。。。。。。</p><p>槽点太多了，就不一一列举了。</p><p>这样一部漏洞百出的电影，只是沾了一点爱国主义题材，加上一点炫酷的电脑特效，竟然在网上一片褒扬和歌颂，被捧到了<a href="https://baijiahao.baidu.com/s?id=1624586138147514462&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">“亮剑好莱坞”</a>的高度。</p><p>从《湄公河行动》（票房11.8亿人民币)开始，到《战狼》系列 （总票房62亿人民币），这两年似乎只要是爱国题材的电影，票房都屡屡刷新记录。</p><p>不知道这是好事，还是坏事。</p><p>至少《流浪地球》这张电影票，我认为我自己是买亏了。</p>]]></content>
    
    <summary type="html">
    
      用电脑特效堆砌的毫无营养的快消品。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="影评" scheme="https://tk208.github.io/tags/%E5%BD%B1%E8%AF%84/"/>
    
      <category term="科幻" scheme="https://tk208.github.io/tags/%E7%A7%91%E5%B9%BB/"/>
    
  </entry>
  
  <entry>
    <title>人不会因为梦想而伟大，而会因为实现梦想而伟大。</title>
    <link href="https://tk208.github.io/%E4%BA%BA%E4%B8%8D%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%A2%A6%E6%83%B3%E8%80%8C%E4%BC%9F%E5%A4%A7%EF%BC%8C%E8%80%8C%E6%98%AF%E5%9B%A0%E4%B8%BA%E5%8A%AA%E5%8A%9B%E5%AE%9E%E7%8E%B0%E6%A2%A6%E6%83%B3%E8%80%8C%E4%BC%9F%E5%A4%A7%E3%80%82/"/>
    <id>https://tk208.github.io/人不是因为梦想而伟大，而是因为努力实现梦想而伟大。/</id>
    <published>2019-02-07T06:55:43.000Z</published>
    <updated>2019-03-31T05:40:59.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><img src="https://image.tracup.com/b1ebadbaa3caf5dbe43104d5d4590f69" alt="spacex_starlink_satellite_ip.jpg!720.jpg" title="SpanceX 的 Starlink 全球天基互联网计划"></p>]]></content>
    
    <summary type="html">
    
      活着就是为了改变世界。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Life/Tech/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="感悟" scheme="https://tk208.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="马斯克" scheme="https://tk208.github.io/tags/%E9%A9%AC%E6%96%AF%E5%85%8B/"/>
    
      <category term="Elon Musk" scheme="https://tk208.github.io/tags/Elon-Musk/"/>
    
  </entry>
  
  <entry>
    <title>Cordova，React-Native 和 Swift ，谁是下一个霸主？（译文）</title>
    <link href="https://tk208.github.io/Cordova%EF%BC%8CReact-Native-%E5%92%8C-Swift-%EF%BC%8C%E8%B0%81%E6%98%AF%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%9C%B8%E4%B8%BB%EF%BC%9F/"/>
    <id>https://tk208.github.io/Cordova，React-Native-和-Swift-，谁是下一个霸主？/</id>
    <published>2019-02-05T06:52:16.000Z</published>
    <updated>2019-04-02T10:58:06.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>本文作者是：<a href="https://yagiz.co/cordova-react-native-swift-whats-next/" target="_blank" rel="noopener">Yagiz Nizipli</a>（亚齐兹·尼茨普坭），一位专注于手机应用程序开发的软件工程师，目前定居在土耳其的伊斯坦布尔。你可以在 Youtube 和 Twitter 上查阅到他的更多信息。</p><blockquote><p>Written by Yagiz Nizipli a Software Architect living in Istanbul working on mobile applications. Look me up on <a href="">Youtube</a> and follow me on <a href="">Twitter</a>.</p></blockquote><p>原文发表的时间是：2019-01-03。<a href="https://yagiz.co/cordova-react-native-swift-whats-next/" target="_blank" rel="noopener">(原文链接请点击这里)</a></p><p>文中的 <strong>注解</strong> 是我查阅资料自己写上去的，和原作者无关，若有纰漏，欢迎批评指正。</p><p>结论：</p><p>Yagiz Nizipli 使用 React-Native (美国 Facebook 公司产品)做开发最多（一度用的很爽），使用 Cordova (美国 Google 公司产品)断断续续四年，但都因为这样那样的问题，被作者嫌弃。最后使用 Swift （美国 Apple公司产品）仅仅一个多月，就喜欢上了用 Swift。</p><p>三种技术中，Swift 的学习难度最大。</p><h1 id="译文如下："><a href="#译文如下：" class="headerlink" title="译文如下："></a>译文如下：</h1><hr><p>能够写点关于手机应用程序 App 开发的文章，让我感到相当兴奋。在我的脑海中形成这个想法已经很久了。在开始之前，我想先简单的介绍一下我自己。</p><p>我是一个全栈开发软件工程师（既会前端也懂后台）。在过去六年的时间中，我一直使用 JavaScript 语言做软件开发。从古老的 ES5 开始，这门语言发展和进步非常的显著。充分的了解过去可以更好的理解未来，这一点是非常重要的。</p><p>好了，让我们开始进入技术吧。</p><h2 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h2><p>过去的四年中，我使用Cordova做开发的频率并不多。</p><p>以前，如果你使用 CSS3 语法的新特性，即便是做一个简单的动画效果也无法在 Android 设备上正常运行。因为这些 Android 设备都使用自己默认的浏览器，这些浏览器都不提供对 CSS3 语言的支持。当时，只有谷歌浏览器 Chromium 提供对这些动画效果的支持。</p><p><strong>注</strong>：</p><blockquote><p>美国的谷歌浏览器 Chromium 和苹果公司浏览器 Safari 所使用的 webkit 内核是目前公认的最快的网页浏览方式。</p><p>互联网的精神是 自由、开放、共享。</p><p>webkit 内核是由美国的谷歌公司 Google，苹果公司 Apple Inc，加拿大 RIM 公司（黑莓手机制作商）和芬兰的诺基亚公司 Nokia 共同开发的浏览器引擎。其中在代码贡献率方面，Google占了50%，苹果25%、RIM (7%)和诺基亚(5%)。然后源代码全部公开，让全世界的爱好者们都可以免费使用。</p><p>目前使用 webkit 内核的国产浏览器有：360极速浏览器、枫树浏览器、太阳花浏览器、世界之窗极速版、傲游浏览器和 UC 浏览器电脑版等。</p><p>搜狗高速浏览器和腾讯的 qq 浏览器官网未提及 Chromium，只说采用 webkit 内核，经网友测试这两款浏览器极有可能也是使用的 Chromium，只是官方不承认而已。</p><p>包括2018年高调宣称 打破美国垄断，拥有中国首个自主创新智能浏览器内核 的 红芯浏览器，也是使用 Chromium 的源代码。</p><p>全世界的手机除了美国苹果公司的 iphone 之外，全部使用美国谷歌 Google 公司开发的 Android(安卓系统) 作为操作系统。包括国内的华为、小米、OPPO、Vivo等。</p><p>Android 操作系统最初由 Andy Rubin 个人开发，2005年8月由 Google 收购注资。2007年11月，Google 与84家硬件制造商、软件开发商及电信营运商组建开放手机联盟共同研发改良 Android 系统。随后 Google 公司再次发布了 Android 的源代码，让全世界的互联网爱好者和手机研发厂商可以免费使用。 截至 2013年09月24日，全世界采用这款系统的设备数量已经达到10亿台。</p><p>谷歌 Google 公司目前市值 7752 亿美元，国内目前市值最高的公司阿里巴巴市值 4354 亿美元，紧随其后的腾讯市值 4220 亿美元。<a href="http://economy.caijing.com.cn/20190203/4561005.shtml" target="_blank" rel="noopener">(数据截至2019-2-2)</a></p></blockquote><p>所以，Cordova 的开发者与时俱进的把 Chromium 的精简版内嵌进了它的升级版本中，这样使用 Cordova 做开发就可以支持 CSS3 等语法的新特性，呈现各种酷炫的动画效果。</p><p>对于那些传统的网页开发人员（Web Developer）而言，使用 Cordova 技术把你电脑上的网站直接作为 App 在手机上运行，是一件让人兴奋和着迷的事情。</p><p>而且，对于一个关注 JavaScript 及其生态系统的团队来说，使用 Ionic ( AngularJS + Cordova + IonicUI) 开发项目是一笔有趣的投资。这使得 Cordova 在项目开发中举足轻重，同时却会造成整个项目中的其他技术变得虚弱。比如 Web。</p><p><img src="https://image.tracup.com/55cbbbcf68bf29eec7248c1321213bbe" alt="cordovaapparchitecture.png" title="这张图很好的展示了 Cordova 技术如何将 Web 应用转换为手机操作系统可运行的程序的过程"></p><p><strong>注：</strong></p><blockquote><p>AugularJS 是美国 Google 公司基于 JavaScript 编程语言开发的一款前端框架，目前是前端三大框架之一。</p><p>前端三大框架分别是：</p></blockquote><p><img src="https://image.tracup.com/b9066a03b2258a87e410db81f3fcdb04" alt="Angular.jpg" title="美国 Google 谷歌公司的 AugularJS"></p><p><img src="https://image.tracup.com/03c50023c9990747c43296bf9f596b3f" alt="React.png" title="美国 Facebook 脸书公司的 React"></p><p><img src="https://image.tracup.com/21da1dc093a8b6db567a103f47141f96" alt="VueJS.jpg" title="在美华人 尤雨溪 在 Google 实习期间开发的 Vue"></p><blockquote><p>这三大前端框架都是免费开源的，目前使用量最大的是 React，最受欢迎的是 Vue。</p><p>Ionic 是美国 Google 谷歌公司开发的一套绑定了 AngularJS, Sass, Cordova, 专注于用 Web 开发技术，基于 HTML5 创建类似于手机平台原生应用的一个开发框架。</p><p>理论上，你使用了 Ionic 开发的项目，只需要一套代码，就可以运行在电脑、平板、安卓手机、苹果手机、微软手机等等所有不同的平台上。</p></blockquote><h3 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h3><ul><li><p>原生代码通过它与应用程序的浏览器层通讯。</p></li><li><p>WKWebView 是只支持 iOS 设备的浏览器，并且安卓设备和苹果设备的浏览器之间有很多不一致性。</p></li></ul><blockquote><p>由于iOS平台的限制，所有浏览器都必须构建在 WebKit 渲染引擎之上。</p></blockquote><ul><li>所有通信都必须通过HTML渲染引擎 (在苹果设备 iOS 中是 WebView)，最终导致 App 的表现和设备上面的浏览器严格相关，会出现不一样的呈现效果。</li></ul><blockquote><p>关于浏览器的更多知识，<a href="https://www.cnblogs.com/wyaocn/p/5761163.html" target="_blank" rel="noopener">请点击这里。</a></p></blockquote><hr><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>在 React Native (简称RN) 第一次发布时，它宣称只使用 JavaScript 也能编写原生移动应用,这对于开发者非常具有吸引力。</p><p><strong>注：</strong></p><blockquote><p> React Native 是美国 Facebook 公司在 React 的基础上开发的开源的跨平台 App 框架。</p><p>它的目标是让 Web 开发者既不用学习 Objective-C (一种用于开发运行在所有苹果公司设备上的应用程序的编程语言)，也不用学习 Java (用于开发运行在所有使用 Android 安卓操作系统的设备上的应用程序的编程语言)。</p><p>仅仅使用 Web 开发常用的 JavaScript 语言即可开发出能同时运行在 PC端（电脑）、iOS端(苹果设备)、Android端(安卓设备)的混合应用，并且从使用感受上和原生应用几乎一模一样。</p><p>听起来是不是很诱人？</p></blockquote><p>让我们先来看看 React Native 的生态系统。</p><p>Facebook 的这个项目团队每个月会发布一个新版本，直到去年的九月份（我猜的）。此后，据我观察，他们开始每隔两个月才发布更新后的版本。</p><p><img src="https://image.tracup.com/44ca11fbde55ecbd5c7b012de5a367d1" alt="react-vs-swift.png" title="在不同的状态下，对比React Native 和 Swift（原生App） 的CPU使用率"></p><p>由图可知，即便和用 Swift 语言开发的原生 App 比较起来，性能一样不俗。在2017年，我们使用 React-Native 开发了一系列项目。开发过程很顺利，团队中的每个人都很开心。代码发布的很快，因为我们使用 JavaScript 的技能早已炉火纯青，我们总能按时交付并发布高质量的 App。</p><p>我一直用的很爽，直到需要自己写通讯接口的代码的时候（通过 JavaScript bridge 建立到 Swift 端的通讯）。我根据 Facebook 团队的建议更新了react-native-git-upgrade模块，却造成了一个未知的变化，导致了我的代码报错。</p><h3 id="主要问题-1"><a href="#主要问题-1" class="headerlink" title="主要问题"></a>主要问题</h3><ul><li><p>它所依赖的 React 和 React-Native 内核之间的不一致性；</p></li><li><p>React 仍然不遵循语义化的版本控制。在我看来，一个诞生已经四年，每天都在积极开发的项目，不应该是 0.5x.xx 这种版本号。(这大概反映了一个事实：底层还没稳定，所以发不了1.0。)</p></li><li><p>不一致性在 React-Native 内核已经出现很多次了。</p></li></ul><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><p>我刚刚才开始使用 Swift 做开发仅仅一个多月，所以现在就对它盖棺定论并不客观。</p><p>以我的拙见，Swift 做的事情，和 Cordova，React-Native 是一样的，都是用来开发手机端移动应用 App 。</p><p>每一段使用 Swift 书写的代码都有一个目的。强迫开发者使用苹果公司 XCode 去做开发，这给新手带来了一定的痛苦。</p><p>自动布局约束对于新开发人员来说是相当困难的。有很多很棒的库，比如 SnapKit, Cartography，旨在解决这种模糊性，但仍然不是默认的方法。</p><h2 id="综上所述，我作为一名开发人员最好的体验还是使用-Swift。"><a href="#综上所述，我作为一名开发人员最好的体验还是使用-Swift。" class="headerlink" title="综上所述，我作为一名开发人员最好的体验还是使用 Swift。"></a>综上所述，我作为一名开发人员最好的体验还是使用 Swift。</h2><p>因为既没有 React-Native 的不一致性 (JavaScript bridge)，也没有 Cordova 的 WebView 这些坑儿让你跳。你可以使用任何你想要的库，并且可以无限制地访问设备。</p>]]></content>
    
    <summary type="html">
    
      作为一个手机 App 开发者，作者谈了自己使用标题里面的三种技术开发的感受。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程语言" scheme="https://tk208.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="App开发" scheme="https://tk208.github.io/tags/App%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://tk208.github.io/tags/React/"/>
    
      <category term="Swift" scheme="https://tk208.github.io/tags/Swift/"/>
    
      <category term="Cordova" scheme="https://tk208.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>白蛇：缘起之影评</title>
    <link href="https://tk208.github.io/%E7%99%BD%E8%9B%87%EF%BC%9A%E7%BC%98%E8%B5%B7%E4%B9%8B%E5%BD%B1%E8%AF%84/"/>
    <id>https://tk208.github.io/白蛇：缘起之影评/</id>
    <published>2019-02-03T11:33:30.000Z</published>
    <updated>2019-03-31T05:40:59.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言。"><a href="#引言。" class="headerlink" title="引言。"></a>引言。</h2><hr><p>最近《白蛇：缘起》这部动漫电影很火，豆瓣更是一度罕见的给出了8.1的评分。</p><p>我也抽空已阅，感觉很棒，现在说说观后感。</p><h2 id="并非旧瓶装新酒。"><a href="#并非旧瓶装新酒。" class="headerlink" title="并非旧瓶装新酒。"></a>并非旧瓶装新酒。</h2><hr><p><img src="https://image.tracup.com/c6f50e88a26f9af3c6009d088b438a07" alt="abd14cc768744e07529890362cb71d5a.jpeg"></p><p>大多数人看到片名，首先想到的是这片子和《新白娘子传奇》、《白蛇传》有什么联系？</p><p>毕竟大陆电视剧界已经翻拍过无数港台的经典传奇剧目，一直很努力，却始终无法在口碑上超越港台经典。</p><p>同时，这又是一部动漫电影，在很多人的陈旧观念中动漫和专为儿童拍的动画片没有区别。</p><p><strong>以上是造成这部影片有着超高的口碑，票房却没有给出对应的超强表现，有点“叫好不叫座”的主要原因。</strong></p><h4 id="这是一部讲述纯洁爱情故事的电影。"><a href="#这是一部讲述纯洁爱情故事的电影。" class="headerlink" title="这是一部讲述纯洁爱情故事的电影。"></a>这是一部讲述纯洁爱情故事的电影。</h4><pre><code>爱情，是人类最美好的情感之一。中国从古至今的爱情故事很多，其中有四大民间爱情传说，流传最广，影响最大。分别是：《牛郎织女》、《孟姜女哭长城》、《梁山伯与祝英台》、《白蛇与许仙》。</code></pre><p>这部电影选择了《白蛇传》作为故事的切入口，</p><p>故事是全新的，却并没有为了标新立异而对千年经典进行所谓的颠覆创新和重新诠释。</p><p>你可以认为是《白蛇传》的前传。</p><h2 id="源自经典，传承经典。"><a href="#源自经典，传承经典。" class="headerlink" title="源自经典，传承经典。"></a>源自经典，传承经典。</h2><hr><pre><code>人生如此，浮生如此，缘生缘死，谁知、谁知，情终情始，情真情痴，何须何处，情之至。</code></pre><p>因为是前传，尽管这部电影的故事是全新的，但是《白蛇传》中很多让人耳熟能详的事物都埋了伏笔。</p><p>比如：油纸伞、西湖断桥、白娘子的发型和服饰。</p><p><img src="https://image.tracup.com/plugin_c5498f2d2aa5f049560beeac4b45fee9.png" alt="snapshot_20190203065127.png" title="结尾出现的断桥相遇"></p><p><img src="https://image.tracup.com/plugin_8a0b3558e751ce7d00cd9692f7216bfc.png" alt="snapshot_20190203065336.png" title="结尾出现的断桥相遇"></p><p>同时，该片对影响70后、80后甚至90后的一代经典剧目的经典画面代入和情景再现，往往能勾起现在中青年人对当年青葱懵懂岁月的追忆。</p><p>比如：</p><p><img src="https://image.tracup.com/7faf329bfe465f3be93bdaaf4537b1c7" alt="640-735.jpg"></p><p><img src="https://image.tracup.com/26b132812cb9ede3a9b1b52a940e25f0" alt="99f3ce552c0b4390a8d8ba340088a452.jpg"></p><p>小白和小青共浴的画面是对<a href="https://baike.baidu.com/tashuo/browse/content?id=d73dbd026632f4d1df20c055&amp;lemmaId=2139009&amp;lemmaId=2139009&amp;fr=qingtian" target="_blank" rel="noopener">徐克93年《青蛇传》的致敬</a></p><p><img src="https://image.tracup.com/plugin_54fb89b16f37718d659070f62d5666f4.png" alt="snapshot_20190203065601.png"></p><p>白蛇的师傅“蛇母”</p><p>让人瞬间联想到 <strong>倩女幽魂</strong> 里那个重口味的姥姥；</p><p>阴柔道士</p><p>的黄金符咒、穿针引线，有点 <strong>东方不败</strong> 的影子；</p><p>许仙的前世—-片中的阿宣<br>的性格是按照 <strong>令狐冲</strong> 的形象塑造的；</p><p>阿宣和小白<br>最后被道士施法被禁锢在冰天雪地中的桥段，则与 <strong>泰坦尼克号</strong> 沉没后，杰克（Jack）保护露丝（Rose）如出一辙。</p><h2 id="情不知所起，一往而深。"><a href="#情不知所起，一往而深。" class="headerlink" title="情不知所起，一往而深。"></a>情不知所起，一往而深。</h2><hr><pre><code>何须问，浮生情，原知浮生是梦中；何须问，浮生情，只此浮生是梦中。</code></pre><p>在这部电影中，分为 <strong>人类</strong> 和 <strong>妖类</strong>。</p><p>人类的皇帝为了自己长生不老，</p><p>寻道问药，将家国大事全部交给国师。国师献策，捕杀蛇类可以熬制长生不老药。</p><p>蛇类道行越高，修炼成妖，捕杀后熬制的药效越好。</p><pre><code>这里原封不动的还原了唐朝柳州元的《捕蛇者说》中的故事。</code></pre><blockquote><p>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。</p></blockquote><blockquote><p>有蒋氏者，专其利三世矣。问之，则曰：“吾祖死于是，吾父死于是，今吾嗣为之十二年，几死者数矣。”言之貌若甚戚者。余悲之，且曰：“若毒之乎？余将告于莅事者，更若役，复若赋，则如何？”蒋氏大戚，汪然出涕，曰：“君将哀而生之乎？则吾斯役之不幸，未若复吾赋不幸之甚也。向吾不为斯役，则久已病矣。自吾氏三世居是乡，积于今六十岁矣。而乡邻之生日蹙，殚其地之出，竭其庐之入。号呼而转徙，饥渴而顿踣。触风雨，犯寒暑，呼嘘毒疠，往往而死者，相藉也。曩与吾祖居者，今其室十无一焉。与吾父居者，今其室十无二三焉。与吾居十二年者，今其室十无四五焉。非死则徙尔，而吾以捕蛇独存。悍吏之来吾乡，叫嚣乎东西，隳突乎南北；哗然而骇者，虽鸡狗不得宁焉。吾恂恂而起，视其缶，而吾蛇尚存，则弛然而卧。谨食之，时而献焉。退而甘食其土之有，以尽吾齿。盖一岁之犯死者二焉，其余则熙熙而乐，岂若吾乡邻之旦旦有是哉。今虽死乎此，比吾乡邻之死则已后矣，又安敢毒耶？”</p></blockquote><blockquote><p>余闻而愈悲，孔子曰：“苛政猛于虎也！”吾尝疑乎是，今以蒋氏观之，犹信。呜呼！孰知赋敛之毒，有甚于是蛇者乎！故为之说，以俟夫观人风者得焉。</p></blockquote><pre><code>永州产毒蛇，捉到后晾干把它用来作成药饵，可以治很多疑难杂症。文中说太医用皇帝的命令征集这种蛇，每年征收这种蛇两次，用毒蛇来抵消他原本需要交给朝廷的税收。永州的人都争着去做捕毒蛇这件事。有一家姓蒋的，祖父死在捕蛇这件差事上，父亲也死在这件事情上。现在他继承祖业干这差事也已十二年了，险些丧命也有好几次了。柳宗元很同情他，说：如果你怨恨这个差事，我可以向官府为你求情，以后你不用冒着生命危险捕蛇了，像以前一样交税就行了。蒋氏听了更加悲伤，满眼含泪的说：您可怜我，想让我活下去，然而我干这差事的不幸，还比不上恢复我缴纳各种苛捐杂税的不幸那么厉害啊。。。</code></pre><p>言归正传。</p><p>永州人阿宣迫于生计加入了捕蛇队。</p><p>人类肆无忌惮的疯狂捕杀蛇类，引起了蛇类的复仇。</p><p>蛇母派出小白（白素贞的前世）行刺国师，却因法力不够被击落水中，记忆丧失，被阿宣（许仙的前世）在捕蛇途中所救。</p><h3 id="好了，不剧透了，你们自己去看吧"><a href="#好了，不剧透了，你们自己去看吧" class="headerlink" title="好了，不剧透了，你们自己去看吧~~"></a>好了，不剧透了，你们自己去看吧~~</h3><p>在人类眼中，妖类都是害人的；</p><p>在蛇妖眼中，人类都是害蛇的。</p><p>双方充满了仇恨杀戮，水火不容。</p><p><img src="https://image.tracup.com/98851fefe747d9925445d7803ad3ff94" alt="timg.jpg" title="小白刚接触阿宣和人类时，充满防备"></p><p>阿宣的单纯和质朴感染了小白，让小白认识到人类没有那么坏。</p><p><img src="https://image.tracup.com/6bfea74782cbd8b2e769de5eb289bf75" alt="白蛇缘起"></p><p>小白的善良和美丽打动了阿宣，让阿宣为了爱情奋不顾身。</p><p><img src="https://image.tracup.com/64828af55cf1d650d5f7246dfe17db65" alt="20190118070234819.jpg"></p><p>小白为了救阿宣，在紧急关头不惜和蛇族决裂用法力击杀了凶神恶煞的师兄；</p><p>阿宣为了和小白在一起，干脆设法变成了妖类，全然不顾人类的鄙夷；</p><p><strong>世界上最美好的事情莫过于，</strong></p><p><strong>你喜欢的人刚好也喜欢你，一切都是刚刚好。</strong></p><pre><code>《白蛇：缘起》刻画的是理想中的爱情。</code></pre><p>每个人</p><p>都期许自己能有属于这样的一份爱情，然而现实中这样的爱情很难寻见。</p><h3 id="现实中多的是"><a href="#现实中多的是" class="headerlink" title="现实中多的是"></a>现实中多的是</h3><pre><code>你喜欢的，偏偏不喜欢你。说好一起到白头，你却偷偷焗了油！爱情需要一点奋不顾身，结局却往往惨不忍睹。忽如一夜春风来，千树万树梨花开。梦里是春风，是梨花，可现实是寒风，是雪花。雪花很常见，要找到一个人跟你喝雪花很容易，但要找到那个跟你一起勇闯天涯的人，似乎还是太难。</code></pre><p>大多数人都是精致的功利主义和现实主义者。</p><p>秉持“这世间，真心本就稀缺，所以更该俭省”，把爱情和婚姻都捆绑在利益权衡和交换上。这代表了大部分人的心声：</p><pre><code>爱情？值几个钱？是一栋房子，一辆车子，还是一笔存款……</code></pre><h3 id="因为稀缺，所以珍贵"><a href="#因为稀缺，所以珍贵" class="headerlink" title="因为稀缺，所以珍贵"></a>因为稀缺，所以珍贵</h3><p>这是这部电影能够引发强烈点赞和好评的重要支撑。</p><p>因为它焕发了人性最基础最原始的情感，抛开了物质和利益绑架的，现实中极难寻觅的，在影片中可以找到这种寄托和共鸣的情感。</p><h2 id="关于动漫和二次元。"><a href="#关于动漫和二次元。" class="headerlink" title="关于动漫和二次元。"></a>关于动漫和二次元。</h2><hr><p>我不是动漫爱好者，也很少看动漫电影。</p><p>但是我并不认为看动漫电影是幼稚和不成熟的表现。</p><p>相反，动漫反映了人的纯真和丰富的想象力，是人类智慧成果的结晶之一。</p><p>全世界动漫产业最发达的国家是日本，在动漫产业化和科技化，尤其电脑特效方面，最擅长的国家是美国。</p><p>在包容多元民主的社会中，动漫给成年人带去了返璞归真的一片心灵净土，同时也产生了巨大的商业价值和社会效益。</p><p>在日本，这些用二维平面图像构成的动画、动漫世界被称为 <strong>“二次元世界”。</strong></p><p>与之对应的，人类的现实世界是三维立体的，叫做 <strong>“三次元世界”。</strong></p><h3 id="二次元世界，是可以用想象力构建出来的唯美的、理想中的世界。是人类心中模糊的对梦想生活的憧憬和对美好未来的期望。"><a href="#二次元世界，是可以用想象力构建出来的唯美的、理想中的世界。是人类心中模糊的对梦想生活的憧憬和对美好未来的期望。" class="headerlink" title="二次元世界，是可以用想象力构建出来的唯美的、理想中的世界。是人类心中模糊的对梦想生活的憧憬和对美好未来的期望。"></a>二次元世界，是可以用想象力构建出来的唯美的、理想中的世界。是人类心中模糊的对梦想生活的憧憬和对美好未来的期望。</h3><p>而动漫电影往往拥有比真人电影，更富情感表达、更具视觉体验、更有想象空间。</p><p>举个列子：</p><p>请看这部《白蛇：缘起》中小白在不同情境和不同心情下的面部微表情，即便真人演员表演起来也未必能达到如此精准传神的效果。</p><p><img src="https://image.tracup.com/465892ffc6951cfb6e2f526bf24611b5" alt="白蛇1.jpg"></p><p><img src="https://image.tracup.com/7d0866e4f3ea4fe48ed6bca4182d2ecc" alt="小白.jpg"></p><p><img src="https://image.tracup.com/f704c79f2d9de3cd83f53d924201d12f" alt="白蛇.jpg"></p><p><img src="https://image.tracup.com/d21b1658a055c184bfdef3c792d45408" alt="小白小青.jpg"></p><p><img src="https://image.tracup.com/c6f50e88a26f9af3c6009d088b438a07" alt="abd14cc768744e07529890362cb71d5a.jpeg"></p><p>而我对二次元或者动漫产生关注，</p><p>是因为国内一个小众视频网站：哔哩哔哩Bilibili（B站）。</p><p>国内唯一一个对非会员不歧视，不弹广告，也根本无广告骚扰的良心视频网站，一个由二次元爱好者们用口碑堆起来的网站，一个拥有海量免费中文学习视频的良心平台。</p><p>这是我在使用了国内的网易、腾讯、爱奇艺、优酷；和国外的Youtube、Netflix、Facebook等产品后，得出的结论。</p><p>所以，我从此对 二次元 产生了好感。</p><p><strong>这部国产动漫电影带给了我感动和惊喜，推荐给大家。</strong></p>]]></content>
    
    <summary type="html">
    
      目前国内水准最高的动漫电影之一，无论是画面质感，还是剧情桥段，都无懈可击。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="影评" scheme="https://tk208.github.io/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>诗和远方系列之走进柬埔寨：绝美泰国湾</title>
    <link href="https://tk208.github.io/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%B3%BB%E5%88%97%E4%B9%8B%E8%B5%B0%E8%BF%9B%E6%9F%AC%E5%9F%94%E5%AF%A8%EF%BC%9A%E7%BB%9D%E7%BE%8E%E6%B3%B0%E5%9B%BD%E6%B9%BE/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%B3%BB%E5%88%97%E4%B9%8B%E8%B5%B0%E8%BF%9B%E6%9F%AC%E5%9F%94%E5%AF%A8%EF%BC%9A%E7%BB%9D%E7%BE%8E%E6%B3%B0%E5%9B%BD%E6%B9%BE/"/>
    <id>https://tk208.github.io/诗和远方系列之走进柬埔寨：绝美泰国湾/诗和远方系列之走进柬埔寨：绝美泰国湾/</id>
    <published>2019-02-02T09:59:28.000Z</published>
    <updated>2019-03-31T05:45:14.967Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.tracup.com/ecfdfb7cea0d3f0020a8485b200af124" alt="1.jpg" title="柬埔寨的泰坦尼克号"></p><h2 id="柬埔寨是曾经的东南亚地区的“罗马帝国”，坐拥整个泰国湾。"><a href="#柬埔寨是曾经的东南亚地区的“罗马帝国”，坐拥整个泰国湾。" class="headerlink" title="柬埔寨是曾经的东南亚地区的“罗马帝国”，坐拥整个泰国湾。"></a>柬埔寨是曾经的东南亚地区的“罗马帝国”，坐拥整个泰国湾。</h2><p><img src="https://image.tracup.com/19461a67ae3b4cfc7ac8f5366f519014" alt="柬埔寨疆域" title="曾经的高棉帝国，坐拥柬埔寨、老挝、泰国和部分缅甸，泰国湾是其内湖。"></p><h3 id="尽管现在领土面积大幅缩水，柬埔寨仍然拥有长达443公里的海岸线，享有得天独厚的热带海洋景观。"><a href="#尽管现在领土面积大幅缩水，柬埔寨仍然拥有长达443公里的海岸线，享有得天独厚的热带海洋景观。" class="headerlink" title="尽管现在领土面积大幅缩水，柬埔寨仍然拥有长达443公里的海岸线，享有得天独厚的热带海洋景观。"></a>尽管现在领土面积大幅缩水，柬埔寨仍然拥有长达443公里的海岸线，享有得天独厚的热带海洋景观。</h3><h3 id="今天推荐的柬埔寨的一处度假胜地是有“小马尔代夫”之称谓的："><a href="#今天推荐的柬埔寨的一处度假胜地是有“小马尔代夫”之称谓的：" class="headerlink" title="今天推荐的柬埔寨的一处度假胜地是有“小马尔代夫”之称谓的："></a>今天推荐的柬埔寨的一处度假胜地是有“小马尔代夫”之称谓的：</h3><h3 id="高龙撒冷岛（Kho-Rong-Samloem-Island）"><a href="#高龙撒冷岛（Kho-Rong-Samloem-Island）" class="headerlink" title="高龙撒冷岛（Kho Rong Samloem Island）"></a><strong>高龙撒冷岛（Kho Rong Samloem Island）</strong></h3><h3 id="先放几张图，待更未完。。。"><a href="#先放几张图，待更未完。。。" class="headerlink" title="先放几张图，待更未完。。。"></a>先放几张图，待更未完。。。</h3><p><img src="https://image.tracup.com/212580e6e7997dc821f16baefe961988" alt="IMG20180218104044.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/3fa9161386c1a24ba9f69ecc2e630c77" alt="IMG20180218103951.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/470efc46e436dc97710a032cc931fb0a" alt="IMG20180218104046.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/6bec69fc251afd4a707f0b0bc32c2838" alt="IMG20180218110728.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/026056f3a0f07d0cb3ea8bf42cee1d34" alt="IMG20180218110933.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/dd450598fa46f65dc829fa3457cd86fd" alt="IMG20180218111215.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/4eebb18cf11e5f5187e793ded1eae0f9" alt="微信图片_20190202165846.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/43283a501ba2ddc6063d793e367ecd5f" alt="IMG20180218104703.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/e73e56286b1cc00cdcd36ddab3e8d14b" alt="微信图片_20190202132606.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/9c50422f5d06793ac3ba75a07c9d3e00" alt="微信图片_20190202132651.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/6d01f55512bd62d621f2d8f283c115c5" alt="微信图片_20190202154406.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p><p><img src="https://image.tracup.com/9580fe2429f4cfaa8e5fa7e88918203a" alt="微信图片_20190202132852.jpg" title="Kho Rong Samloem 高龙撒冷岛海景"></p>]]></content>
    
    <summary type="html">
    
      度假胜地，绝美海景，一个你来了就不想走的地方。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="旅游" scheme="https://tk208.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="自然风光" scheme="https://tk208.github.io/tags/%E8%87%AA%E7%84%B6%E9%A3%8E%E5%85%89/"/>
    
  </entry>
  
  <entry>
    <title>利用 Markdown Here 实现高效排版</title>
    <link href="https://tk208.github.io/%E5%88%A9%E7%94%A8Markdown-Here%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E6%8E%92%E7%89%88/%E5%88%A9%E7%94%A8Markdown-Here%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E6%8E%92%E7%89%88/"/>
    <id>https://tk208.github.io/利用Markdown-Here实现高效排版/利用Markdown-Here实现高效排版/</id>
    <published>2019-02-01T04:30:28.000Z</published>
    <updated>2019-02-02T09:59:37.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>自从开通微信公众号后，推送文章是经常需要做的工作，而编辑文章内容往往却成了让人头疼的问题。</p><h2 id="推送公众号文章流程"><a href="#推送公众号文章流程" class="headerlink" title="推送公众号文章流程"></a>推送公众号文章流程</h2><ol><li><p>上传图片</p></li><li><p>将文字内容复制到编辑器中</p></li><li><p>插入图片</p></li><li><p>设置一级标题字体 &amp; 颜色</p></li><li><p>设置二级标题字体 &amp; 颜色</p></li><li><p>设置正文字体和颜色</p></li></ol><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>使用微信公众号自带的编辑器，效率极低。就像使用word一样，你需要时不时的用鼠标点击选择自己想要的样式和颜色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当下最高效最前沿的写作语言是 <span class="string">"Markdown"</span>，可以让你的双手专注于写作内容，只需用键盘敲击不同的字符就可以自动实现漂亮的排版。</span><br></pre></td></tr></table></figure><h3 id="而微信公众号自带的可视化编辑器却还在使用富文本，没有提供对-Markdown-语法的支持。"><a href="#而微信公众号自带的可视化编辑器却还在使用富文本，没有提供对-Markdown-语法的支持。" class="headerlink" title="而微信公众号自带的可视化编辑器却还在使用富文本，没有提供对 Markdown 语法的支持。"></a>而微信公众号自带的可视化编辑器却还在使用富文本，没有提供对 Markdown 语法的支持。</h3><p>如果你正在使用 Markdown 语法来写文章，又需要将文章发布到微信公众账号，你需要这样做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除Markdown特定的语法标记，再将文字内容黏贴到公众号的编辑器中进行排版</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将 Markdown 文章转换成 HTML，再将文字内容黏贴到公众号的编辑器中进行排版</span><br></pre></td></tr></table></figure><p>对于篇幅较长的文章，上述两种处理方法会耗费你的大量时间和精力。</p><h3 id="有没有一种办法，将这个问题一劳永逸的解决呢？"><a href="#有没有一种办法，将这个问题一劳永逸的解决呢？" class="headerlink" title="有没有一种办法，将这个问题一劳永逸的解决呢？"></a>有没有一种办法，将这个问题一劳永逸的解决呢？</h3><p><code>答案是肯定的：借助第三方工具。</code></p><blockquote><p>这里我推荐使用 Markdown Here，一个浏览器插件，通过其提供的一键渲染和自定义CSS样式功能，达到我们满意的效果。</p></blockquote><p><a href="https://markdown-here.com/" target="_blank" rel="noopener">Markdown Here</a> 语法支持的浏览器有 Chrome, Firefox, Safari, Thunderbird。</p><p>国内的互联网是局域网，想要正常使用国际网络中的内容，需要“翻墙”，给实际工作带来很多不便。</p><p>我经过实践发现，Firefox 火狐浏览器有国内版本可以正常使用，建议下载使用。然后在浏览器中安装 Markdown Here 插件。</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><ol><li>安装好火狐浏览器 FireFox，进入 Markdown 官网点击红色方框中的区域；</li></ol><p><img src="https://image.tracup.com/plugin_f9283edfb460f0e18834823982523a6e.png" alt="Markdown Here" title="Markdown Here官网"></p><ol start="2"><li>点击红色方框中的区域，进入下一步；</li></ol><p><img src="https://image.tracup.com/plugin_921307bd416b43dc0dbdfe179e2cf71b.png" alt="Markdown Here" title="Markdown Here官网"></p><ol start="3"><li>继续安装；</li></ol><p><img src="https://image.tracup.com/plugin_0903960cc3e9f1e10a567bc832755edc.png" alt="Markdown Here" title="Markdown Here官网"></p><ol start="4"><li>安装成功后，浏览器右上角会出现黑白色的 Markdown Here 图标；</li></ol><p><img src="https://image.tracup.com/plugin_b2bc2b2ac7ded9e74d8cdd2a749aee04.png" alt="Markdown Here" title="Markdown Here图标"></p><p>至此，准备工作都就绪了。</p><p>现在我们使用 Markdown 也能发送微信公众账号了。通过火狐浏览器 Firefox 打开公众后台编辑器，直接复制带有 Markdown 语法的文章或者笔记到编辑器中，点击浏览器右上角「Markdown Here」图标，Markdown Here 已经将你的文章进行了全新的排版，文章标题层级、正文、加粗、引用，一目了然。</p><h3 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h3><p>现在你只需要好好写作，不用担心排版的问题，那些「脏、乱、差」的工作都交给 Markdown Here 来解决。如果你还懂一点 CSS 的语法，完全可以根据自己的喜好来设置属于自己的 CSS 样式。</p><p>如果你现在使用的是 Web 版的邮箱，你也可以 Markdown 来书写你的邮件内容，在最后通过 Markdown Here 一键渲染，格式化邮件样式。</p><h3 id="设置自己喜欢的样式"><a href="#设置自己喜欢的样式" class="headerlink" title="设置自己喜欢的样式"></a>设置自己喜欢的样式</h3><p>下面给出了三个老师的 Markdown Here 渲染样式，你可以根据自己的喜好，将其添加到自己的Markdown Here的 CSS 样式表中。</p><p>方法如下：</p><ol><li><p>打开 Firefox 浏览器右上角的菜单，找到 <strong>附件组件</strong> ；</p></li><li><p>点击 <strong>扩展</strong> ，找到 Markdown Here ，点击 <strong>选项</strong> ；</p></li></ol><p><img src="https://image.tracup.com/plugin_68b0063e0f7bf75cc0ec75a93db48238.png" alt="Markdown Here" title="Markdown Here样式配置"></p><ol start="3"><li>进入界面后，显示如下；</li></ol><p><img src="https://image.tracup.com/plugin_f07ff32ca3279c8ee7e2846b10ac0b3f.png" alt="Markdown Here" title="Markdown Here样式配置"></p><ol start="4"><li>找到 <strong>基本渲染CSS</strong> ，将三个老师中你喜欢的样式代码复制黏贴到里面即可。</li></ol><p><img src="https://image.tracup.com/plugin_d5a855ddd7d87144772fed1c8a723a21.png" alt="Markdown Here" title="Markdown Here样式配置"></p><h3 id="Markdown-Here-样式"><a href="#Markdown-Here-样式" class="headerlink" title="Markdown Here 样式"></a>Markdown Here 样式</h3><ul><li><p>Version 1 <a href="https://github.com/veganshe/CodeBlock/blob/master/Markdown-here/markdown-here-lxl.css" target="_blank" rel="noopener">(李笑来版)</a>（推荐）</p></li><li><p>Version 2 <a href="https://github.com/veganshe/CodeBlock/blob/master/Markdown-here/markdown-here-yzp.css" target="_blank" rel="noopener">(阳志平版)</a></p></li><li><p>Version 3 <a href="https://github.com/veganshe/CodeBlock/blob/master/Markdown-here/markdown-here-veganshe.css" target="_blank" rel="noopener">(王小杰版)</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      如果你经常推送文章到微信公众号，追求文章排版的美观，这篇文章就是你所需要的。
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown" scheme="https://tk208.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用MarkDown写博客遇到一些问题(持续更新中)。</title>
    <link href="https://tk208.github.io/Some-issue-when-writing-blogs-with-MarkDown/Some-issue-when-writing-blogs-with-MarkDown/"/>
    <id>https://tk208.github.io/Some-issue-when-writing-blogs-with-MarkDown/Some-issue-when-writing-blogs-with-MarkDown/</id>
    <published>2019-01-30T16:18:30.000Z</published>
    <updated>2019-02-02T04:46:15.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><h3 id="上标（superscripts）和下标-（subscripts）"><a href="#上标（superscripts）和下标-（subscripts）" class="headerlink" title="上标（superscripts）和下标 （subscripts）"></a>上标（superscripts）和下标 （subscripts）</h3><h4 id="有两种表示法："><a href="#有两种表示法：" class="headerlink" title="有两种表示法："></a>有两种表示法：</h4><ol><li>Latex公式表示法</li></ol><p>&#160; &#160; &#160; &#160; &#160; 上标用<code>^</code>，下标用<code>_</code>。</p><blockquote><p>用VS Code编辑MarkDown文本预览有效，支持这种公式输入法。</p></blockquote><blockquote><p>在基于Hexo框架搭建的Blog中，却无法正确显示结果。</p></blockquote><p>所以，不推荐使用这种<a href="https://wenku.baidu.com/view/65f6b2395bcfa1c7aa00b52acfc789eb172d9eae.html" target="_blank" rel="noopener">Latex公式表示方法</a>。</p><ol start="2"><li>HTML标签表示法</li></ol><blockquote><p>HTML可以很轻松得打出上标和下标，而markdown是支持HTML语法的。</p></blockquote><p>上标用<code>&lt;sup&gt;xxx&lt;/sup&gt;</code>，下标用<code>&lt;sub&gt;xxx&lt;/sub&gt;</code>。</p><p> 其中xxx表示上标的内容，看个例子：</p><p> 写一个公式：n的平方等于n+1</p><p> 写法如下：</p><p> <code>n&lt;sup&gt;2&lt;/sup&gt;=n+1</code></p><p> 结果如下：</p><blockquote><p>n<sup>2</sup>=n+1</p></blockquote><p>HTML标签表示法无论是在IDE中，还是在hexo deploy后的Blog中实际呈现结果都是一致正确的。</p><p>所以，推荐使用<a href="https://www.jianshu.com/p/80ac23666a98" target="_blank" rel="noopener">HTML标签表示上下标</a>。</p>]]></content>
    
    <summary type="html">
    
      Some issue when writing blogs with MarkDown(Updating).
    
    </summary>
    
      <category term="Tech" scheme="https://tk208.github.io/categories/Tech/"/>
    
    
      <category term="技术" scheme="https://tk208.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown" scheme="https://tk208.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>写在2019年的伊始</title>
    <link href="https://tk208.github.io/%E5%86%99%E5%9C%A82019%E5%B9%B4%E7%9A%84%E4%BC%8A%E5%A7%8B/%E5%86%99%E5%9C%A82019%E5%B9%B4%E7%9A%84%E4%BC%8A%E5%A7%8B/"/>
    <id>https://tk208.github.io/写在2019年的伊始/写在2019年的伊始/</id>
    <published>2019-01-30T09:50:29.000Z</published>
    <updated>2019-02-07T07:27:00.745Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;今年回家最大的变化是沿河拔地而起的栋栋高楼。</p><p>&#160; &#160; &#160; &#160;据说价格冲到了&yen; 5200元/m<sup>2</sup>，一年前这个数字的最大值是&yen; 4500元/m<sup>2</sup>。<a href="http://xy.cityhouse.cn/market/GC/" target="_blank" rel="noopener">平均价格&yen; 3710元/m<sup>2</sup>，同比上涨11.2%</a>。再往前一年，这个价格的平均值是&yen; 2800元/m<sup>2</sup>左右。</p><p>&#160; &#160; &#160; &#160;<a href="http://www.guchengnews.com/2018/1212/758284.shtml" target="_blank" rel="noopener">官方数据显示</a>，2018年前11个月，我县房地产开发用地供应面积同比增长 598.36%，新建商品房销售面积同比增长 302.77 %。</p><p>&#160; &#160; &#160; &#160;同样在2018年，<a href="http://info.plas.hc360.com/2019/01/211408681977.shtml" target="_blank" rel="noopener">中国的GDP的增速为6.6%，</a>其中第四季度增速为6.4%，创下了近十年的最低记录；<a href="https://baijiahao.baidu.com/s?id=1623327916219725626" target="_blank" rel="noopener">全国居民人均可支配收入28228元，实际增长6.5%</a>。<a href="http://fashion.eastday.com/a/181228103313200.html" target="_blank" rel="noopener">A股市值下降15万亿人民币，人均亏损超10万。</a><a href="http://www.sohu.com/a/288881331_114822" target="_blank" rel="noopener">汽车销量创下三十多年来首次下滑的记录。</a></p><h4 id="160-160-160-160-一半是火焰，一半是冰山。"><a href="#160-160-160-160-一半是火焰，一半是冰山。" class="headerlink" title="&#160; &#160; &#160; &#160;一半是火焰，一半是冰山。"></a>&#160; &#160; &#160; &#160;<strong>一半是火焰，一半是冰山。</strong></h4>]]></content>
    
    <summary type="html">
    
      阔别一年的家乡发生的变化。
    
    </summary>
    
      <category term="Life" scheme="https://tk208.github.io/categories/Life/"/>
    
    
      <category term="生活" scheme="https://tk208.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
